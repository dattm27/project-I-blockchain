// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ordering.proto

#include "ordering.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace iroha {
namespace ordering {
namespace proto {
PROTOBUF_CONSTEXPR ProposalRound::ProposalRound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_round_)*/uint64_t{0u}
  , /*decltype(_impl_.reject_round_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProposalRoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalRoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalRoundDefaultTypeInternal() {}
  union {
    ProposalRound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalRoundDefaultTypeInternal _ProposalRound_default_instance_;
PROTOBUF_CONSTEXPR BatchesRequest::BatchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchesRequestDefaultTypeInternal() {}
  union {
    BatchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchesRequestDefaultTypeInternal _BatchesRequest_default_instance_;
PROTOBUF_CONSTEXPR ProposalRequest::ProposalRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.round_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProposalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalRequestDefaultTypeInternal() {}
  union {
    ProposalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalRequestDefaultTypeInternal _ProposalRequest_default_instance_;
PROTOBUF_CONSTEXPR ProposalResponse::ProposalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposal_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProposalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalResponseDefaultTypeInternal() {}
  union {
    ProposalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalResponseDefaultTypeInternal _ProposalResponse_default_instance_;
}  // namespace proto
}  // namespace ordering
}  // namespace iroha
static ::_pb::Metadata file_level_metadata_ordering_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ordering_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ordering_2eproto = nullptr;

const uint32_t TableStruct_ordering_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRound, _impl_.block_round_),
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRound, _impl_.reject_round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::BatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::BatchesRequest, _impl_.transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRequest, _impl_.round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalResponse, _impl_.proposal_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::iroha::ordering::proto::ProposalRound)},
  { 8, -1, -1, sizeof(::iroha::ordering::proto::BatchesRequest)},
  { 15, -1, -1, sizeof(::iroha::ordering::proto::ProposalRequest)},
  { 22, -1, -1, sizeof(::iroha::ordering::proto::ProposalResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::iroha::ordering::proto::_ProposalRound_default_instance_._instance,
  &::iroha::ordering::proto::_BatchesRequest_default_instance_._instance,
  &::iroha::ordering::proto::_ProposalRequest_default_instance_._instance,
  &::iroha::ordering::proto::_ProposalResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ordering_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ordering.proto\022\024iroha.ordering.proto\032\021"
  "transaction.proto\032\016proposal.proto\032\016endpo"
  "int.proto\032\033google/protobuf/empty.proto\":"
  "\n\rProposalRound\022\023\n\013block_round\030\001 \001(\004\022\024\n\014"
  "reject_round\030\002 \001(\r\"C\n\016BatchesRequest\0221\n\014"
  "transactions\030\001 \003(\0132\033.iroha.protocol.Tran"
  "saction\"E\n\017ProposalRequest\0222\n\005round\030\001 \001("
  "\0132#.iroha.ordering.proto.ProposalRound\">"
  "\n\020ProposalResponse\022*\n\010proposal\030\001 \003(\0132\030.i"
  "roha.protocol.Proposal2[\n\031OrderingGateTr"
  "ansportGrpc\022>\n\nonProposal\022\030.iroha.protoc"
  "ol.Proposal\032\026.google.protobuf.Empty2Y\n\034O"
  "rderingServiceTransportGrpc\0229\n\007onBatch\022\026"
  ".iroha.protocol.TxList\032\026.google.protobuf"
  ".Empty2\301\001\n\020OnDemandOrdering\022K\n\013SendBatch"
  "es\022$.iroha.ordering.proto.BatchesRequest"
  "\032\026.google.protobuf.Empty\022`\n\017RequestPropo"
  "sal\022%.iroha.ordering.proto.ProposalReque"
  "st\032&.iroha.ordering.proto.ProposalRespon"
  "seb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ordering_2eproto_deps[4] = {
  &::descriptor_table_endpoint_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_proposal_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::_pbi::once_flag descriptor_table_ordering_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ordering_2eproto = {
    false, false, 770, descriptor_table_protodef_ordering_2eproto,
    "ordering.proto",
    &descriptor_table_ordering_2eproto_once, descriptor_table_ordering_2eproto_deps, 4, 4,
    schemas, file_default_instances, TableStruct_ordering_2eproto::offsets,
    file_level_metadata_ordering_2eproto, file_level_enum_descriptors_ordering_2eproto,
    file_level_service_descriptors_ordering_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ordering_2eproto_getter() {
  return &descriptor_table_ordering_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ordering_2eproto(&descriptor_table_ordering_2eproto);
namespace iroha {
namespace ordering {
namespace proto {

// ===================================================================

class ProposalRound::_Internal {
 public:
};

ProposalRound::ProposalRound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.ordering.proto.ProposalRound)
}
ProposalRound::ProposalRound(const ProposalRound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProposalRound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_round_){}
    , decltype(_impl_.reject_round_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.block_round_, &from._impl_.block_round_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reject_round_) -
    reinterpret_cast<char*>(&_impl_.block_round_)) + sizeof(_impl_.reject_round_));
  // @@protoc_insertion_point(copy_constructor:iroha.ordering.proto.ProposalRound)
}

inline void ProposalRound::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_round_){uint64_t{0u}}
    , decltype(_impl_.reject_round_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProposalRound::~ProposalRound() {
  // @@protoc_insertion_point(destructor:iroha.ordering.proto.ProposalRound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProposalRound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProposalRound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProposalRound::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.ordering.proto.ProposalRound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.block_round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reject_round_) -
      reinterpret_cast<char*>(&_impl_.block_round_)) + sizeof(_impl_.reject_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalRound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.block_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reject_round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reject_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProposalRound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.ordering.proto.ProposalRound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_round = 1;
  if (this->_internal_block_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_round(), target);
  }

  // uint32 reject_round = 2;
  if (this->_internal_reject_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reject_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.ordering.proto.ProposalRound)
  return target;
}

size_t ProposalRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.ordering.proto.ProposalRound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_round = 1;
  if (this->_internal_block_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_round());
  }

  // uint32 reject_round = 2;
  if (this->_internal_reject_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reject_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProposalRound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProposalRound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProposalRound::GetClassData() const { return &_class_data_; }


void ProposalRound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProposalRound*>(&to_msg);
  auto& from = static_cast<const ProposalRound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.ordering.proto.ProposalRound)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_round() != 0) {
    _this->_internal_set_block_round(from._internal_block_round());
  }
  if (from._internal_reject_round() != 0) {
    _this->_internal_set_reject_round(from._internal_reject_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProposalRound::CopyFrom(const ProposalRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.ordering.proto.ProposalRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalRound::IsInitialized() const {
  return true;
}

void ProposalRound::InternalSwap(ProposalRound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposalRound, _impl_.reject_round_)
      + sizeof(ProposalRound::_impl_.reject_round_)
      - PROTOBUF_FIELD_OFFSET(ProposalRound, _impl_.block_round_)>(
          reinterpret_cast<char*>(&_impl_.block_round_),
          reinterpret_cast<char*>(&other->_impl_.block_round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalRound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ordering_2eproto_getter, &descriptor_table_ordering_2eproto_once,
      file_level_metadata_ordering_2eproto[0]);
}

// ===================================================================

class BatchesRequest::_Internal {
 public:
};

void BatchesRequest::clear_transactions() {
  _impl_.transactions_.Clear();
}
BatchesRequest::BatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.ordering.proto.BatchesRequest)
}
BatchesRequest::BatchesRequest(const BatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.ordering.proto.BatchesRequest)
}

inline void BatchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatchesRequest::~BatchesRequest() {
  // @@protoc_insertion_point(destructor:iroha.ordering.proto.BatchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
}

void BatchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.ordering.proto.BatchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.ordering.proto.BatchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_transactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.ordering.proto.BatchesRequest)
  return target;
}

size_t BatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.ordering.proto.BatchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->_impl_.transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchesRequest::GetClassData() const { return &_class_data_; }


void BatchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchesRequest*>(&to_msg);
  auto& from = static_cast<const BatchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.ordering.proto.BatchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchesRequest::CopyFrom(const BatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.ordering.proto.BatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchesRequest::IsInitialized() const {
  return true;
}

void BatchesRequest::InternalSwap(BatchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ordering_2eproto_getter, &descriptor_table_ordering_2eproto_once,
      file_level_metadata_ordering_2eproto[1]);
}

// ===================================================================

class ProposalRequest::_Internal {
 public:
  static const ::iroha::ordering::proto::ProposalRound& round(const ProposalRequest* msg);
};

const ::iroha::ordering::proto::ProposalRound&
ProposalRequest::_Internal::round(const ProposalRequest* msg) {
  return *msg->_impl_.round_;
}
ProposalRequest::ProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.ordering.proto.ProposalRequest)
}
ProposalRequest::ProposalRequest(const ProposalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProposalRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.round_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_round()) {
    _this->_impl_.round_ = new ::iroha::ordering::proto::ProposalRound(*from._impl_.round_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.ordering.proto.ProposalRequest)
}

inline void ProposalRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.round_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProposalRequest::~ProposalRequest() {
  // @@protoc_insertion_point(destructor:iroha.ordering.proto.ProposalRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProposalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.round_;
}

void ProposalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.ordering.proto.ProposalRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.round_ != nullptr) {
    delete _impl_.round_;
  }
  _impl_.round_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.ordering.proto.ProposalRound round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_round(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProposalRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.ordering.proto.ProposalRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.ordering.proto.ProposalRound round = 1;
  if (this->_internal_has_round()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::round(this),
        _Internal::round(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.ordering.proto.ProposalRequest)
  return target;
}

size_t ProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.ordering.proto.ProposalRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.ordering.proto.ProposalRound round = 1;
  if (this->_internal_has_round()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.round_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProposalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProposalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProposalRequest::GetClassData() const { return &_class_data_; }


void ProposalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProposalRequest*>(&to_msg);
  auto& from = static_cast<const ProposalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.ordering.proto.ProposalRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_round()) {
    _this->_internal_mutable_round()->::iroha::ordering::proto::ProposalRound::MergeFrom(
        from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProposalRequest::CopyFrom(const ProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.ordering.proto.ProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalRequest::IsInitialized() const {
  return true;
}

void ProposalRequest::InternalSwap(ProposalRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.round_, other->_impl_.round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ordering_2eproto_getter, &descriptor_table_ordering_2eproto_once,
      file_level_metadata_ordering_2eproto[2]);
}

// ===================================================================

class ProposalResponse::_Internal {
 public:
};

void ProposalResponse::clear_proposal() {
  _impl_.proposal_.Clear();
}
ProposalResponse::ProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.ordering.proto.ProposalResponse)
}
ProposalResponse::ProposalResponse(const ProposalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProposalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_){from._impl_.proposal_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.ordering.proto.ProposalResponse)
}

inline void ProposalResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProposalResponse::~ProposalResponse() {
  // @@protoc_insertion_point(destructor:iroha.ordering.proto.ProposalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProposalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proposal_.~RepeatedPtrField();
}

void ProposalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProposalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.ordering.proto.ProposalResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proposal_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Proposal proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProposalResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.ordering.proto.ProposalResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Proposal proposal = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proposal_size()); i < n; i++) {
    const auto& repfield = this->_internal_proposal(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.ordering.proto.ProposalResponse)
  return target;
}

size_t ProposalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.ordering.proto.ProposalResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Proposal proposal = 1;
  total_size += 1UL * this->_internal_proposal_size();
  for (const auto& msg : this->_impl_.proposal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProposalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProposalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProposalResponse::GetClassData() const { return &_class_data_; }


void ProposalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProposalResponse*>(&to_msg);
  auto& from = static_cast<const ProposalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.ordering.proto.ProposalResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.proposal_.MergeFrom(from._impl_.proposal_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProposalResponse::CopyFrom(const ProposalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.ordering.proto.ProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalResponse::IsInitialized() const {
  return true;
}

void ProposalResponse::InternalSwap(ProposalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.proposal_.InternalSwap(&other->_impl_.proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ordering_2eproto_getter, &descriptor_table_ordering_2eproto_once,
      file_level_metadata_ordering_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace ordering
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::ordering::proto::ProposalRound*
Arena::CreateMaybeMessage< ::iroha::ordering::proto::ProposalRound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::ordering::proto::ProposalRound >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::ordering::proto::BatchesRequest*
Arena::CreateMaybeMessage< ::iroha::ordering::proto::BatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::ordering::proto::BatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::ordering::proto::ProposalRequest*
Arena::CreateMaybeMessage< ::iroha::ordering::proto::ProposalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::ordering::proto::ProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::ordering::proto::ProposalResponse*
Arena::CreateMaybeMessage< ::iroha::ordering::proto::ProposalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::ordering::proto::ProposalResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
