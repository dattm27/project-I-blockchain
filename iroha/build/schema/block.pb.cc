// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#include "block.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace iroha {
namespace protocol {
PROTOBUF_CONSTEXPR Block_v1_Payload::Block_v1_Payload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.rejected_transactions_hashes_)*/{}
  , /*decltype(_impl_.prev_block_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.height_)*/uint64_t{0u}
  , /*decltype(_impl_.created_time_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_number_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Block_v1_PayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Block_v1_PayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Block_v1_PayloadDefaultTypeInternal() {}
  union {
    Block_v1_Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Block_v1_PayloadDefaultTypeInternal _Block_v1_Payload_default_instance_;
PROTOBUF_CONSTEXPR Block_v1::Block_v1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signatures_)*/{}
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Block_v1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Block_v1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Block_v1DefaultTypeInternal() {}
  union {
    Block_v1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Block_v1DefaultTypeInternal _Block_v1_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_version_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace protocol
}  // namespace iroha
static ::_pb::Metadata file_level_metadata_block_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_block_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_block_2eproto = nullptr;

const uint32_t TableStruct_block_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, _impl_.transactions_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, _impl_.tx_number_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, _impl_.prev_block_hash_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, _impl_.created_time_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, _impl_.rejected_transactions_hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1, _impl_.signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block, _impl_.block_version_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::iroha::protocol::Block_v1_Payload)},
  { 12, -1, -1, sizeof(::iroha::protocol::Block_v1)},
  { 20, -1, -1, sizeof(::iroha::protocol::Block)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::iroha::protocol::_Block_v1_Payload_default_instance_._instance,
  &::iroha::protocol::_Block_v1_default_instance_._instance,
  &::iroha::protocol::_Block_default_instance_._instance,
};

const char descriptor_table_protodef_block_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013block.proto\022\016iroha.protocol\032\017primitive"
  ".proto\032\021transaction.proto\"\243\002\n\010Block_v1\0221"
  "\n\007payload\030\001 \001(\0132 .iroha.protocol.Block_v"
  "1.Payload\022-\n\nsignatures\030\002 \003(\0132\031.iroha.pr"
  "otocol.Signature\032\264\001\n\007Payload\0221\n\014transact"
  "ions\030\001 \003(\0132\033.iroha.protocol.Transaction\022"
  "\021\n\ttx_number\030\002 \001(\r\022\016\n\006height\030\003 \001(\004\022\027\n\017pr"
  "ev_block_hash\030\004 \001(\t\022\024\n\014created_time\030\005 \001("
  "\004\022$\n\034rejected_transactions_hashes\030\006 \003(\t\""
  "F\n\005Block\022,\n\010block_v1\030\001 \001(\0132\030.iroha.proto"
  "col.Block_v1H\000B\017\n\rblock_versionB\032Z\030iroha"
  ".generated/protocolb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_block_2eproto_deps[2] = {
  &::descriptor_table_primitive_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::_pbi::once_flag descriptor_table_block_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_block_2eproto = {
    false, false, 467, descriptor_table_protodef_block_2eproto,
    "block.proto",
    &descriptor_table_block_2eproto_once, descriptor_table_block_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_block_2eproto::offsets,
    file_level_metadata_block_2eproto, file_level_enum_descriptors_block_2eproto,
    file_level_service_descriptors_block_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_block_2eproto_getter() {
  return &descriptor_table_block_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_block_2eproto(&descriptor_table_block_2eproto);
namespace iroha {
namespace protocol {

// ===================================================================

class Block_v1_Payload::_Internal {
 public:
};

void Block_v1_Payload::clear_transactions() {
  _impl_.transactions_.Clear();
}
Block_v1_Payload::Block_v1_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Block_v1.Payload)
}
Block_v1_Payload::Block_v1_Payload(const Block_v1_Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block_v1_Payload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.rejected_transactions_hashes_){from._impl_.rejected_transactions_hashes_}
    , decltype(_impl_.prev_block_hash_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.created_time_){}
    , decltype(_impl_.tx_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prev_block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prev_block_hash().empty()) {
    _this->_impl_.prev_block_hash_.Set(from._internal_prev_block_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tx_number_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.tx_number_));
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Block_v1.Payload)
}

inline void Block_v1_Payload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , decltype(_impl_.rejected_transactions_hashes_){arena}
    , decltype(_impl_.prev_block_hash_){}
    , decltype(_impl_.height_){uint64_t{0u}}
    , decltype(_impl_.created_time_){uint64_t{0u}}
    , decltype(_impl_.tx_number_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prev_block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Block_v1_Payload::~Block_v1_Payload() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Block_v1.Payload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block_v1_Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
  _impl_.rejected_transactions_hashes_.~RepeatedPtrField();
  _impl_.prev_block_hash_.Destroy();
}

void Block_v1_Payload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block_v1_Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Block_v1.Payload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _impl_.rejected_transactions_hashes_.Clear();
  _impl_.prev_block_hash_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tx_number_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.tx_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block_v1_Payload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 tx_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tx_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prev_block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_prev_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.Block_v1.Payload.prev_block_hash"));
        } else
          goto handle_unusual;
        continue;
      // uint64 created_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.created_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string rejected_transactions_hashes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rejected_transactions_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.Block_v1.Payload.rejected_transactions_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block_v1_Payload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Block_v1.Payload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_transactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 tx_number = 2;
  if (this->_internal_tx_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tx_number(), target);
  }

  // uint64 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // string prev_block_hash = 4;
  if (!this->_internal_prev_block_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_block_hash().data(), static_cast<int>(this->_internal_prev_block_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Block_v1.Payload.prev_block_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prev_block_hash(), target);
  }

  // uint64 created_time = 5;
  if (this->_internal_created_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_created_time(), target);
  }

  // repeated string rejected_transactions_hashes = 6;
  for (int i = 0, n = this->_internal_rejected_transactions_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_rejected_transactions_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Block_v1.Payload.rejected_transactions_hashes");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Block_v1.Payload)
  return target;
}

size_t Block_v1_Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Block_v1.Payload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->_impl_.transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string rejected_transactions_hashes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.rejected_transactions_hashes_.size());
  for (int i = 0, n = _impl_.rejected_transactions_hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.rejected_transactions_hashes_.Get(i));
  }

  // string prev_block_hash = 4;
  if (!this->_internal_prev_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_block_hash());
  }

  // uint64 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  // uint64 created_time = 5;
  if (this->_internal_created_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_time());
  }

  // uint32 tx_number = 2;
  if (this->_internal_tx_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tx_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block_v1_Payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block_v1_Payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block_v1_Payload::GetClassData() const { return &_class_data_; }


void Block_v1_Payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block_v1_Payload*>(&to_msg);
  auto& from = static_cast<const Block_v1_Payload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Block_v1.Payload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  _this->_impl_.rejected_transactions_hashes_.MergeFrom(from._impl_.rejected_transactions_hashes_);
  if (!from._internal_prev_block_hash().empty()) {
    _this->_internal_set_prev_block_hash(from._internal_prev_block_hash());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_created_time() != 0) {
    _this->_internal_set_created_time(from._internal_created_time());
  }
  if (from._internal_tx_number() != 0) {
    _this->_internal_set_tx_number(from._internal_tx_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block_v1_Payload::CopyFrom(const Block_v1_Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Block_v1.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block_v1_Payload::IsInitialized() const {
  return true;
}

void Block_v1_Payload::InternalSwap(Block_v1_Payload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  _impl_.rejected_transactions_hashes_.InternalSwap(&other->_impl_.rejected_transactions_hashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prev_block_hash_, lhs_arena,
      &other->_impl_.prev_block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block_v1_Payload, _impl_.tx_number_)
      + sizeof(Block_v1_Payload::_impl_.tx_number_)
      - PROTOBUF_FIELD_OFFSET(Block_v1_Payload, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block_v1_Payload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[0]);
}

// ===================================================================

class Block_v1::_Internal {
 public:
  static const ::iroha::protocol::Block_v1_Payload& payload(const Block_v1* msg);
};

const ::iroha::protocol::Block_v1_Payload&
Block_v1::_Internal::payload(const Block_v1* msg) {
  return *msg->_impl_.payload_;
}
void Block_v1::clear_signatures() {
  _impl_.signatures_.Clear();
}
Block_v1::Block_v1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Block_v1)
}
Block_v1::Block_v1(const Block_v1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block_v1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signatures_){from._impl_.signatures_}
    , decltype(_impl_.payload_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::iroha::protocol::Block_v1_Payload(*from._impl_.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Block_v1)
}

inline void Block_v1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signatures_){arena}
    , decltype(_impl_.payload_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Block_v1::~Block_v1() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Block_v1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block_v1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signatures_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void Block_v1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block_v1::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Block_v1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block_v1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.protocol.Block_v1.Payload payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iroha.protocol.Signature signatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block_v1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Block_v1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Block_v1.Payload payload = 1;
  if (this->_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  // repeated .iroha.protocol.Signature signatures = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_signatures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Block_v1)
  return target;
}

size_t Block_v1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Block_v1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Signature signatures = 2;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->_impl_.signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .iroha.protocol.Block_v1.Payload payload = 1;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payload_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block_v1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block_v1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block_v1::GetClassData() const { return &_class_data_; }


void Block_v1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block_v1*>(&to_msg);
  auto& from = static_cast<const Block_v1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Block_v1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signatures_.MergeFrom(from._impl_.signatures_);
  if (from._internal_has_payload()) {
    _this->_internal_mutable_payload()->::iroha::protocol::Block_v1_Payload::MergeFrom(
        from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block_v1::CopyFrom(const Block_v1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Block_v1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block_v1::IsInitialized() const {
  return true;
}

void Block_v1::InternalSwap(Block_v1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
  swap(_impl_.payload_, other->_impl_.payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block_v1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[1]);
}

// ===================================================================

class Block::_Internal {
 public:
  static const ::iroha::protocol::Block_v1& block_v1(const Block* msg);
};

const ::iroha::protocol::Block_v1&
Block::_Internal::block_v1(const Block* msg) {
  return *msg->_impl_.block_version_.block_v1_;
}
void Block::set_allocated_block_v1(::iroha::protocol::Block_v1* block_v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_block_version();
  if (block_v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_v1);
    if (message_arena != submessage_arena) {
      block_v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_v1, submessage_arena);
    }
    set_has_block_v1();
    _impl_.block_version_.block_v1_ = block_v1;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Block.block_v1)
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_version_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_block_version();
  switch (from.block_version_case()) {
    case kBlockV1: {
      _this->_internal_mutable_block_v1()->::iroha::protocol::Block_v1::MergeFrom(
          from._internal_block_v1());
      break;
    }
    case BLOCK_VERSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Block)
}

inline void Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_version_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_block_version();
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_block_version()) {
    clear_block_version();
  }
}

void Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block::clear_block_version() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.Block)
  switch (block_version_case()) {
    case kBlockV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.block_version_.block_v1_;
      }
      break;
    }
    case BLOCK_VERSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BLOCK_VERSION_NOT_SET;
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_block_version();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.protocol.Block_v1 block_v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Block_v1 block_v1 = 1;
  if (_internal_has_block_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block_v1(this),
        _Internal::block_v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (block_version_case()) {
    // .iroha.protocol.Block_v1 block_v1 = 1;
    case kBlockV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_version_.block_v1_);
      break;
    }
    case BLOCK_VERSION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }


void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.block_version_case()) {
    case kBlockV1: {
      _this->_internal_mutable_block_v1()->::iroha::protocol::Block_v1::MergeFrom(
          from._internal_block_v1());
      break;
    }
    case BLOCK_VERSION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.block_version_, other->_impl_.block_version_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::protocol::Block_v1_Payload*
Arena::CreateMaybeMessage< ::iroha::protocol::Block_v1_Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Block_v1_Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Block_v1*
Arena::CreateMaybeMessage< ::iroha::protocol::Block_v1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Block_v1 >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Block*
Arena::CreateMaybeMessage< ::iroha::protocol::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
