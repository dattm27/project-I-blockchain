// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_block_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "primitive.pb.h"
#include "transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_block_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_block_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_block_2eproto;
namespace iroha {
namespace protocol {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Block_v1;
struct Block_v1DefaultTypeInternal;
extern Block_v1DefaultTypeInternal _Block_v1_default_instance_;
class Block_v1_Payload;
struct Block_v1_PayloadDefaultTypeInternal;
extern Block_v1_PayloadDefaultTypeInternal _Block_v1_Payload_default_instance_;
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> ::iroha::protocol::Block* Arena::CreateMaybeMessage<::iroha::protocol::Block>(Arena*);
template<> ::iroha::protocol::Block_v1* Arena::CreateMaybeMessage<::iroha::protocol::Block_v1>(Arena*);
template<> ::iroha::protocol::Block_v1_Payload* Arena::CreateMaybeMessage<::iroha::protocol::Block_v1_Payload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iroha {
namespace protocol {

// ===================================================================

class Block_v1_Payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.Block_v1.Payload) */ {
 public:
  inline Block_v1_Payload() : Block_v1_Payload(nullptr) {}
  ~Block_v1_Payload() override;
  explicit PROTOBUF_CONSTEXPR Block_v1_Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block_v1_Payload(const Block_v1_Payload& from);
  Block_v1_Payload(Block_v1_Payload&& from) noexcept
    : Block_v1_Payload() {
    *this = ::std::move(from);
  }

  inline Block_v1_Payload& operator=(const Block_v1_Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block_v1_Payload& operator=(Block_v1_Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block_v1_Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block_v1_Payload* internal_default_instance() {
    return reinterpret_cast<const Block_v1_Payload*>(
               &_Block_v1_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block_v1_Payload& a, Block_v1_Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Block_v1_Payload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block_v1_Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block_v1_Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block_v1_Payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block_v1_Payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block_v1_Payload& from) {
    Block_v1_Payload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block_v1_Payload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.Block_v1.Payload";
  }
  protected:
  explicit Block_v1_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
    kRejectedTransactionsHashesFieldNumber = 6,
    kPrevBlockHashFieldNumber = 4,
    kHeightFieldNumber = 3,
    kCreatedTimeFieldNumber = 5,
    kTxNumberFieldNumber = 2,
  };
  // repeated .iroha.protocol.Transaction transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::iroha::protocol::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >*
      mutable_transactions();
  private:
  const ::iroha::protocol::Transaction& _internal_transactions(int index) const;
  ::iroha::protocol::Transaction* _internal_add_transactions();
  public:
  const ::iroha::protocol::Transaction& transactions(int index) const;
  ::iroha::protocol::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >&
      transactions() const;

  // repeated string rejected_transactions_hashes = 6;
  int rejected_transactions_hashes_size() const;
  private:
  int _internal_rejected_transactions_hashes_size() const;
  public:
  void clear_rejected_transactions_hashes();
  const std::string& rejected_transactions_hashes(int index) const;
  std::string* mutable_rejected_transactions_hashes(int index);
  void set_rejected_transactions_hashes(int index, const std::string& value);
  void set_rejected_transactions_hashes(int index, std::string&& value);
  void set_rejected_transactions_hashes(int index, const char* value);
  void set_rejected_transactions_hashes(int index, const char* value, size_t size);
  std::string* add_rejected_transactions_hashes();
  void add_rejected_transactions_hashes(const std::string& value);
  void add_rejected_transactions_hashes(std::string&& value);
  void add_rejected_transactions_hashes(const char* value);
  void add_rejected_transactions_hashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rejected_transactions_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rejected_transactions_hashes();
  private:
  const std::string& _internal_rejected_transactions_hashes(int index) const;
  std::string* _internal_add_rejected_transactions_hashes();
  public:

  // string prev_block_hash = 4;
  void clear_prev_block_hash();
  const std::string& prev_block_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_block_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_block_hash();
  PROTOBUF_NODISCARD std::string* release_prev_block_hash();
  void set_allocated_prev_block_hash(std::string* prev_block_hash);
  private:
  const std::string& _internal_prev_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_block_hash(const std::string& value);
  std::string* _internal_mutable_prev_block_hash();
  public:

  // uint64 height = 3;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // uint64 created_time = 5;
  void clear_created_time();
  uint64_t created_time() const;
  void set_created_time(uint64_t value);
  private:
  uint64_t _internal_created_time() const;
  void _internal_set_created_time(uint64_t value);
  public:

  // uint32 tx_number = 2;
  void clear_tx_number();
  uint32_t tx_number() const;
  void set_tx_number(uint32_t value);
  private:
  uint32_t _internal_tx_number() const;
  void _internal_set_tx_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iroha.protocol.Block_v1.Payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction > transactions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rejected_transactions_hashes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_block_hash_;
    uint64_t height_;
    uint64_t created_time_;
    uint32_t tx_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class Block_v1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.Block_v1) */ {
 public:
  inline Block_v1() : Block_v1(nullptr) {}
  ~Block_v1() override;
  explicit PROTOBUF_CONSTEXPR Block_v1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block_v1(const Block_v1& from);
  Block_v1(Block_v1&& from) noexcept
    : Block_v1() {
    *this = ::std::move(from);
  }

  inline Block_v1& operator=(const Block_v1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block_v1& operator=(Block_v1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block_v1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block_v1* internal_default_instance() {
    return reinterpret_cast<const Block_v1*>(
               &_Block_v1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block_v1& a, Block_v1& b) {
    a.Swap(&b);
  }
  inline void Swap(Block_v1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block_v1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block_v1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block_v1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block_v1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block_v1& from) {
    Block_v1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block_v1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.Block_v1";
  }
  protected:
  explicit Block_v1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Block_v1_Payload Payload;

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 2,
    kPayloadFieldNumber = 1,
  };
  // repeated .iroha.protocol.Signature signatures = 2;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::iroha::protocol::Signature* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature >*
      mutable_signatures();
  private:
  const ::iroha::protocol::Signature& _internal_signatures(int index) const;
  ::iroha::protocol::Signature* _internal_add_signatures();
  public:
  const ::iroha::protocol::Signature& signatures(int index) const;
  ::iroha::protocol::Signature* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature >&
      signatures() const;

  // .iroha.protocol.Block_v1.Payload payload = 1;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::iroha::protocol::Block_v1_Payload& payload() const;
  PROTOBUF_NODISCARD ::iroha::protocol::Block_v1_Payload* release_payload();
  ::iroha::protocol::Block_v1_Payload* mutable_payload();
  void set_allocated_payload(::iroha::protocol::Block_v1_Payload* payload);
  private:
  const ::iroha::protocol::Block_v1_Payload& _internal_payload() const;
  ::iroha::protocol::Block_v1_Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::iroha::protocol::Block_v1_Payload* payload);
  ::iroha::protocol::Block_v1_Payload* unsafe_arena_release_payload();

  // @@protoc_insertion_point(class_scope:iroha.protocol.Block_v1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature > signatures_;
    ::iroha::protocol::Block_v1_Payload* payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  enum BlockVersionCase {
    kBlockV1 = 1,
    BLOCK_VERSION_NOT_SET = 0,
  };

  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block& from) {
    Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockV1FieldNumber = 1,
  };
  // .iroha.protocol.Block_v1 block_v1 = 1;
  bool has_block_v1() const;
  private:
  bool _internal_has_block_v1() const;
  public:
  void clear_block_v1();
  const ::iroha::protocol::Block_v1& block_v1() const;
  PROTOBUF_NODISCARD ::iroha::protocol::Block_v1* release_block_v1();
  ::iroha::protocol::Block_v1* mutable_block_v1();
  void set_allocated_block_v1(::iroha::protocol::Block_v1* block_v1);
  private:
  const ::iroha::protocol::Block_v1& _internal_block_v1() const;
  ::iroha::protocol::Block_v1* _internal_mutable_block_v1();
  public:
  void unsafe_arena_set_allocated_block_v1(
      ::iroha::protocol::Block_v1* block_v1);
  ::iroha::protocol::Block_v1* unsafe_arena_release_block_v1();

  void clear_block_version();
  BlockVersionCase block_version_case() const;
  // @@protoc_insertion_point(class_scope:iroha.protocol.Block)
 private:
  class _Internal;
  void set_has_block_v1();

  inline bool has_block_version() const;
  inline void clear_has_block_version();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union BlockVersionUnion {
      constexpr BlockVersionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::iroha::protocol::Block_v1* block_v1_;
    } block_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block_v1_Payload

// repeated .iroha.protocol.Transaction transactions = 1;
inline int Block_v1_Payload::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int Block_v1_Payload::transactions_size() const {
  return _internal_transactions_size();
}
inline ::iroha::protocol::Transaction* Block_v1_Payload::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Block_v1.Payload.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >*
Block_v1_Payload::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:iroha.protocol.Block_v1.Payload.transactions)
  return &_impl_.transactions_;
}
inline const ::iroha::protocol::Transaction& Block_v1_Payload::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::iroha::protocol::Transaction& Block_v1_Payload::transactions(int index) const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Block_v1.Payload.transactions)
  return _internal_transactions(index);
}
inline ::iroha::protocol::Transaction* Block_v1_Payload::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::iroha::protocol::Transaction* Block_v1_Payload::add_transactions() {
  ::iroha::protocol::Transaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:iroha.protocol.Block_v1.Payload.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >&
Block_v1_Payload::transactions() const {
  // @@protoc_insertion_point(field_list:iroha.protocol.Block_v1.Payload.transactions)
  return _impl_.transactions_;
}

// uint32 tx_number = 2;
inline void Block_v1_Payload::clear_tx_number() {
  _impl_.tx_number_ = 0u;
}
inline uint32_t Block_v1_Payload::_internal_tx_number() const {
  return _impl_.tx_number_;
}
inline uint32_t Block_v1_Payload::tx_number() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Block_v1.Payload.tx_number)
  return _internal_tx_number();
}
inline void Block_v1_Payload::_internal_set_tx_number(uint32_t value) {
  
  _impl_.tx_number_ = value;
}
inline void Block_v1_Payload::set_tx_number(uint32_t value) {
  _internal_set_tx_number(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.Block_v1.Payload.tx_number)
}

// uint64 height = 3;
inline void Block_v1_Payload::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t Block_v1_Payload::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t Block_v1_Payload::height() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Block_v1.Payload.height)
  return _internal_height();
}
inline void Block_v1_Payload::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void Block_v1_Payload::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.Block_v1.Payload.height)
}

// string prev_block_hash = 4;
inline void Block_v1_Payload::clear_prev_block_hash() {
  _impl_.prev_block_hash_.ClearToEmpty();
}
inline const std::string& Block_v1_Payload::prev_block_hash() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Block_v1.Payload.prev_block_hash)
  return _internal_prev_block_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block_v1_Payload::set_prev_block_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prev_block_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.Block_v1.Payload.prev_block_hash)
}
inline std::string* Block_v1_Payload::mutable_prev_block_hash() {
  std::string* _s = _internal_mutable_prev_block_hash();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Block_v1.Payload.prev_block_hash)
  return _s;
}
inline const std::string& Block_v1_Payload::_internal_prev_block_hash() const {
  return _impl_.prev_block_hash_.Get();
}
inline void Block_v1_Payload::_internal_set_prev_block_hash(const std::string& value) {
  
  _impl_.prev_block_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Block_v1_Payload::_internal_mutable_prev_block_hash() {
  
  return _impl_.prev_block_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* Block_v1_Payload::release_prev_block_hash() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Block_v1.Payload.prev_block_hash)
  return _impl_.prev_block_hash_.Release();
}
inline void Block_v1_Payload::set_allocated_prev_block_hash(std::string* prev_block_hash) {
  if (prev_block_hash != nullptr) {
    
  } else {
    
  }
  _impl_.prev_block_hash_.SetAllocated(prev_block_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_block_hash_.IsDefault()) {
    _impl_.prev_block_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Block_v1.Payload.prev_block_hash)
}

// uint64 created_time = 5;
inline void Block_v1_Payload::clear_created_time() {
  _impl_.created_time_ = uint64_t{0u};
}
inline uint64_t Block_v1_Payload::_internal_created_time() const {
  return _impl_.created_time_;
}
inline uint64_t Block_v1_Payload::created_time() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Block_v1.Payload.created_time)
  return _internal_created_time();
}
inline void Block_v1_Payload::_internal_set_created_time(uint64_t value) {
  
  _impl_.created_time_ = value;
}
inline void Block_v1_Payload::set_created_time(uint64_t value) {
  _internal_set_created_time(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.Block_v1.Payload.created_time)
}

// repeated string rejected_transactions_hashes = 6;
inline int Block_v1_Payload::_internal_rejected_transactions_hashes_size() const {
  return _impl_.rejected_transactions_hashes_.size();
}
inline int Block_v1_Payload::rejected_transactions_hashes_size() const {
  return _internal_rejected_transactions_hashes_size();
}
inline void Block_v1_Payload::clear_rejected_transactions_hashes() {
  _impl_.rejected_transactions_hashes_.Clear();
}
inline std::string* Block_v1_Payload::add_rejected_transactions_hashes() {
  std::string* _s = _internal_add_rejected_transactions_hashes();
  // @@protoc_insertion_point(field_add_mutable:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
  return _s;
}
inline const std::string& Block_v1_Payload::_internal_rejected_transactions_hashes(int index) const {
  return _impl_.rejected_transactions_hashes_.Get(index);
}
inline const std::string& Block_v1_Payload::rejected_transactions_hashes(int index) const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
  return _internal_rejected_transactions_hashes(index);
}
inline std::string* Block_v1_Payload::mutable_rejected_transactions_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
  return _impl_.rejected_transactions_hashes_.Mutable(index);
}
inline void Block_v1_Payload::set_rejected_transactions_hashes(int index, const std::string& value) {
  _impl_.rejected_transactions_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
}
inline void Block_v1_Payload::set_rejected_transactions_hashes(int index, std::string&& value) {
  _impl_.rejected_transactions_hashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
}
inline void Block_v1_Payload::set_rejected_transactions_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rejected_transactions_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
}
inline void Block_v1_Payload::set_rejected_transactions_hashes(int index, const char* value, size_t size) {
  _impl_.rejected_transactions_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
}
inline std::string* Block_v1_Payload::_internal_add_rejected_transactions_hashes() {
  return _impl_.rejected_transactions_hashes_.Add();
}
inline void Block_v1_Payload::add_rejected_transactions_hashes(const std::string& value) {
  _impl_.rejected_transactions_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
}
inline void Block_v1_Payload::add_rejected_transactions_hashes(std::string&& value) {
  _impl_.rejected_transactions_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
}
inline void Block_v1_Payload::add_rejected_transactions_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rejected_transactions_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
}
inline void Block_v1_Payload::add_rejected_transactions_hashes(const char* value, size_t size) {
  _impl_.rejected_transactions_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Block_v1_Payload::rejected_transactions_hashes() const {
  // @@protoc_insertion_point(field_list:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
  return _impl_.rejected_transactions_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Block_v1_Payload::mutable_rejected_transactions_hashes() {
  // @@protoc_insertion_point(field_mutable_list:iroha.protocol.Block_v1.Payload.rejected_transactions_hashes)
  return &_impl_.rejected_transactions_hashes_;
}

// -------------------------------------------------------------------

// Block_v1

// .iroha.protocol.Block_v1.Payload payload = 1;
inline bool Block_v1::_internal_has_payload() const {
  return this != internal_default_instance() && _impl_.payload_ != nullptr;
}
inline bool Block_v1::has_payload() const {
  return _internal_has_payload();
}
inline void Block_v1::clear_payload() {
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
}
inline const ::iroha::protocol::Block_v1_Payload& Block_v1::_internal_payload() const {
  const ::iroha::protocol::Block_v1_Payload* p = _impl_.payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::iroha::protocol::Block_v1_Payload&>(
      ::iroha::protocol::_Block_v1_Payload_default_instance_);
}
inline const ::iroha::protocol::Block_v1_Payload& Block_v1::payload() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Block_v1.payload)
  return _internal_payload();
}
inline void Block_v1::unsafe_arena_set_allocated_payload(
    ::iroha::protocol::Block_v1_Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payload_);
  }
  _impl_.payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.protocol.Block_v1.payload)
}
inline ::iroha::protocol::Block_v1_Payload* Block_v1::release_payload() {
  
  ::iroha::protocol::Block_v1_Payload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iroha::protocol::Block_v1_Payload* Block_v1::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Block_v1.payload)
  
  ::iroha::protocol::Block_v1_Payload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
  return temp;
}
inline ::iroha::protocol::Block_v1_Payload* Block_v1::_internal_mutable_payload() {
  
  if (_impl_.payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::iroha::protocol::Block_v1_Payload>(GetArenaForAllocation());
    _impl_.payload_ = p;
  }
  return _impl_.payload_;
}
inline ::iroha::protocol::Block_v1_Payload* Block_v1::mutable_payload() {
  ::iroha::protocol::Block_v1_Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Block_v1.payload)
  return _msg;
}
inline void Block_v1::set_allocated_payload(::iroha::protocol::Block_v1_Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Block_v1.payload)
}

// repeated .iroha.protocol.Signature signatures = 2;
inline int Block_v1::_internal_signatures_size() const {
  return _impl_.signatures_.size();
}
inline int Block_v1::signatures_size() const {
  return _internal_signatures_size();
}
inline ::iroha::protocol::Signature* Block_v1::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Block_v1.signatures)
  return _impl_.signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature >*
Block_v1::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:iroha.protocol.Block_v1.signatures)
  return &_impl_.signatures_;
}
inline const ::iroha::protocol::Signature& Block_v1::_internal_signatures(int index) const {
  return _impl_.signatures_.Get(index);
}
inline const ::iroha::protocol::Signature& Block_v1::signatures(int index) const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Block_v1.signatures)
  return _internal_signatures(index);
}
inline ::iroha::protocol::Signature* Block_v1::_internal_add_signatures() {
  return _impl_.signatures_.Add();
}
inline ::iroha::protocol::Signature* Block_v1::add_signatures() {
  ::iroha::protocol::Signature* _add = _internal_add_signatures();
  // @@protoc_insertion_point(field_add:iroha.protocol.Block_v1.signatures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature >&
Block_v1::signatures() const {
  // @@protoc_insertion_point(field_list:iroha.protocol.Block_v1.signatures)
  return _impl_.signatures_;
}

// -------------------------------------------------------------------

// Block

// .iroha.protocol.Block_v1 block_v1 = 1;
inline bool Block::_internal_has_block_v1() const {
  return block_version_case() == kBlockV1;
}
inline bool Block::has_block_v1() const {
  return _internal_has_block_v1();
}
inline void Block::set_has_block_v1() {
  _impl_._oneof_case_[0] = kBlockV1;
}
inline void Block::clear_block_v1() {
  if (_internal_has_block_v1()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.block_version_.block_v1_;
    }
    clear_has_block_version();
  }
}
inline ::iroha::protocol::Block_v1* Block::release_block_v1() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Block.block_v1)
  if (_internal_has_block_v1()) {
    clear_has_block_version();
    ::iroha::protocol::Block_v1* temp = _impl_.block_version_.block_v1_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.block_version_.block_v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iroha::protocol::Block_v1& Block::_internal_block_v1() const {
  return _internal_has_block_v1()
      ? *_impl_.block_version_.block_v1_
      : reinterpret_cast< ::iroha::protocol::Block_v1&>(::iroha::protocol::_Block_v1_default_instance_);
}
inline const ::iroha::protocol::Block_v1& Block::block_v1() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Block.block_v1)
  return _internal_block_v1();
}
inline ::iroha::protocol::Block_v1* Block::unsafe_arena_release_block_v1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iroha.protocol.Block.block_v1)
  if (_internal_has_block_v1()) {
    clear_has_block_version();
    ::iroha::protocol::Block_v1* temp = _impl_.block_version_.block_v1_;
    _impl_.block_version_.block_v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Block::unsafe_arena_set_allocated_block_v1(::iroha::protocol::Block_v1* block_v1) {
  clear_block_version();
  if (block_v1) {
    set_has_block_v1();
    _impl_.block_version_.block_v1_ = block_v1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.protocol.Block.block_v1)
}
inline ::iroha::protocol::Block_v1* Block::_internal_mutable_block_v1() {
  if (!_internal_has_block_v1()) {
    clear_block_version();
    set_has_block_v1();
    _impl_.block_version_.block_v1_ = CreateMaybeMessage< ::iroha::protocol::Block_v1 >(GetArenaForAllocation());
  }
  return _impl_.block_version_.block_v1_;
}
inline ::iroha::protocol::Block_v1* Block::mutable_block_v1() {
  ::iroha::protocol::Block_v1* _msg = _internal_mutable_block_v1();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Block.block_v1)
  return _msg;
}

inline bool Block::has_block_version() const {
  return block_version_case() != BLOCK_VERSION_NOT_SET;
}
inline void Block::clear_has_block_version() {
  _impl_._oneof_case_[0] = BLOCK_VERSION_NOT_SET;
}
inline Block::BlockVersionCase Block::block_version_case() const {
  return Block::BlockVersionCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace iroha

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_block_2eproto
