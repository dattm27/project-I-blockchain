// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yac.proto

#include "yac.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace iroha {
namespace consensus {
namespace yac {
namespace proto {
PROTOBUF_CONSTEXPR Signature::Signature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pubkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDefaultTypeInternal() {}
  union {
    Signature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDefaultTypeInternal _Signature_default_instance_;
PROTOBUF_CONSTEXPR VoteRound::VoteRound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_round_)*/uint64_t{0u}
  , /*decltype(_impl_.reject_round_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoteRoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteRoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteRoundDefaultTypeInternal() {}
  union {
    VoteRound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteRoundDefaultTypeInternal _VoteRound_default_instance_;
PROTOBUF_CONSTEXPR VoteHashes::VoteHashes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposal_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoteHashesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteHashesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteHashesDefaultTypeInternal() {}
  union {
    VoteHashes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteHashesDefaultTypeInternal _VoteHashes_default_instance_;
PROTOBUF_CONSTEXPR Hash::Hash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vote_round_)*/nullptr
  , /*decltype(_impl_.vote_hashes_)*/nullptr
  , /*decltype(_impl_.block_signature_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HashDefaultTypeInternal() {}
  union {
    Hash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HashDefaultTypeInternal _Hash_default_instance_;
PROTOBUF_CONSTEXPR Vote::Vote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteDefaultTypeInternal _Vote_default_instance_;
PROTOBUF_CONSTEXPR State::State(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.votes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateDefaultTypeInternal _State_default_instance_;
}  // namespace proto
}  // namespace yac
}  // namespace consensus
}  // namespace iroha
static ::_pb::Metadata file_level_metadata_yac_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_yac_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_yac_2eproto = nullptr;

const uint32_t TableStruct_yac_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Signature, _impl_.pubkey_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Signature, _impl_.signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteRound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteRound, _impl_.block_round_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteRound, _impl_.reject_round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteHashes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteHashes, _impl_.proposal_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteHashes, _impl_.block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Hash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Hash, _impl_.vote_round_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Hash, _impl_.vote_hashes_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Hash, _impl_.block_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Vote, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Vote, _impl_.signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::State, _impl_.votes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::iroha::consensus::yac::proto::Signature)},
  { 8, -1, -1, sizeof(::iroha::consensus::yac::proto::VoteRound)},
  { 16, -1, -1, sizeof(::iroha::consensus::yac::proto::VoteHashes)},
  { 24, -1, -1, sizeof(::iroha::consensus::yac::proto::Hash)},
  { 33, -1, -1, sizeof(::iroha::consensus::yac::proto::Vote)},
  { 41, -1, -1, sizeof(::iroha::consensus::yac::proto::State)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::iroha::consensus::yac::proto::_Signature_default_instance_._instance,
  &::iroha::consensus::yac::proto::_VoteRound_default_instance_._instance,
  &::iroha::consensus::yac::proto::_VoteHashes_default_instance_._instance,
  &::iroha::consensus::yac::proto::_Hash_default_instance_._instance,
  &::iroha::consensus::yac::proto::_Vote_default_instance_._instance,
  &::iroha::consensus::yac::proto::_State_default_instance_._instance,
};

const char descriptor_table_protodef_yac_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tyac.proto\022\031iroha.consensus.yac.proto\032\033"
  "google/protobuf/empty.proto\".\n\tSignature"
  "\022\016\n\006pubkey\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\"6\n\tV"
  "oteRound\022\023\n\013block_round\030\001 \001(\004\022\024\n\014reject_"
  "round\030\002 \001(\r\"-\n\nVoteHashes\022\020\n\010proposal\030\001 "
  "\001(\014\022\r\n\005block\030\002 \001(\014\"\273\001\n\004Hash\0228\n\nvote_roun"
  "d\030\001 \001(\0132$.iroha.consensus.yac.proto.Vote"
  "Round\022:\n\013vote_hashes\030\002 \001(\0132%.iroha.conse"
  "nsus.yac.proto.VoteHashes\022=\n\017block_signa"
  "ture\030\003 \001(\0132$.iroha.consensus.yac.proto.S"
  "ignature\"n\n\004Vote\022-\n\004hash\030\001 \001(\0132\037.iroha.c"
  "onsensus.yac.proto.Hash\0227\n\tsignature\030\002 \001"
  "(\0132$.iroha.consensus.yac.proto.Signature"
  "\"7\n\005State\022.\n\005votes\030\001 \003(\0132\037.iroha.consens"
  "us.yac.proto.Vote2L\n\003Yac\022E\n\tSendState\022 ."
  "iroha.consensus.yac.proto.State\032\026.google"
  ".protobuf.Emptyb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_yac_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_yac_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_yac_2eproto = {
    false, false, 663, descriptor_table_protodef_yac_2eproto,
    "yac.proto",
    &descriptor_table_yac_2eproto_once, descriptor_table_yac_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_yac_2eproto::offsets,
    file_level_metadata_yac_2eproto, file_level_enum_descriptors_yac_2eproto,
    file_level_service_descriptors_yac_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_yac_2eproto_getter() {
  return &descriptor_table_yac_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_yac_2eproto(&descriptor_table_yac_2eproto);
namespace iroha {
namespace consensus {
namespace yac {
namespace proto {

// ===================================================================

class Signature::_Internal {
 public:
};

Signature::Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Signature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_){}
    , decltype(_impl_.signature_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pubkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pubkey().empty()) {
    _this->_impl_.pubkey_.Set(from._internal_pubkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.Signature)
}

inline void Signature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_){}
    , decltype(_impl_.signature_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pubkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.Signature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Signature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pubkey_.Destroy();
  _impl_.signature_.Destroy();
}

void Signature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.Signature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pubkey_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Signature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.Signature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (!this->_internal_pubkey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // bytes signature = 2;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.Signature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (!this->_internal_pubkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // bytes signature = 2;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Signature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Signature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Signature::GetClassData() const { return &_class_data_; }


void Signature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Signature*>(&to_msg);
  auto& from = static_cast<const Signature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.Signature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pubkey().empty()) {
    _this->_internal_set_pubkey(from._internal_pubkey());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pubkey_, lhs_arena,
      &other->_impl_.pubkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yac_2eproto_getter, &descriptor_table_yac_2eproto_once,
      file_level_metadata_yac_2eproto[0]);
}

// ===================================================================

class VoteRound::_Internal {
 public:
};

VoteRound::VoteRound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.VoteRound)
}
VoteRound::VoteRound(const VoteRound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteRound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_round_){}
    , decltype(_impl_.reject_round_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.block_round_, &from._impl_.block_round_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reject_round_) -
    reinterpret_cast<char*>(&_impl_.block_round_)) + sizeof(_impl_.reject_round_));
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.VoteRound)
}

inline void VoteRound::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_round_){uint64_t{0u}}
    , decltype(_impl_.reject_round_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VoteRound::~VoteRound() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.VoteRound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteRound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoteRound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteRound::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.VoteRound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.block_round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reject_round_) -
      reinterpret_cast<char*>(&_impl_.block_round_)) + sizeof(_impl_.reject_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteRound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.block_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reject_round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reject_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteRound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.VoteRound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_round = 1;
  if (this->_internal_block_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_round(), target);
  }

  // uint32 reject_round = 2;
  if (this->_internal_reject_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reject_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.VoteRound)
  return target;
}

size_t VoteRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.VoteRound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_round = 1;
  if (this->_internal_block_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_round());
  }

  // uint32 reject_round = 2;
  if (this->_internal_reject_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reject_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteRound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteRound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteRound::GetClassData() const { return &_class_data_; }


void VoteRound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteRound*>(&to_msg);
  auto& from = static_cast<const VoteRound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.VoteRound)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_round() != 0) {
    _this->_internal_set_block_round(from._internal_block_round());
  }
  if (from._internal_reject_round() != 0) {
    _this->_internal_set_reject_round(from._internal_reject_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteRound::CopyFrom(const VoteRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.VoteRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRound::IsInitialized() const {
  return true;
}

void VoteRound::InternalSwap(VoteRound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteRound, _impl_.reject_round_)
      + sizeof(VoteRound::_impl_.reject_round_)
      - PROTOBUF_FIELD_OFFSET(VoteRound, _impl_.block_round_)>(
          reinterpret_cast<char*>(&_impl_.block_round_),
          reinterpret_cast<char*>(&other->_impl_.block_round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteRound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yac_2eproto_getter, &descriptor_table_yac_2eproto_once,
      file_level_metadata_yac_2eproto[1]);
}

// ===================================================================

class VoteHashes::_Internal {
 public:
};

VoteHashes::VoteHashes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.VoteHashes)
}
VoteHashes::VoteHashes(const VoteHashes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteHashes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_){}
    , decltype(_impl_.block_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proposal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proposal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposal().empty()) {
    _this->_impl_.proposal_.Set(from._internal_proposal(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block().empty()) {
    _this->_impl_.block_.Set(from._internal_block(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.VoteHashes)
}

inline void VoteHashes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_){}
    , decltype(_impl_.block_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proposal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proposal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VoteHashes::~VoteHashes() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.VoteHashes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteHashes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proposal_.Destroy();
  _impl_.block_.Destroy();
}

void VoteHashes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteHashes::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.VoteHashes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proposal_.ClearToEmpty();
  _impl_.block_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteHashes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_proposal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_block();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteHashes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.VoteHashes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes proposal = 1;
  if (!this->_internal_proposal().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_proposal(), target);
  }

  // bytes block = 2;
  if (!this->_internal_block().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.VoteHashes)
  return target;
}

size_t VoteHashes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.VoteHashes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proposal = 1;
  if (!this->_internal_proposal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposal());
  }

  // bytes block = 2;
  if (!this->_internal_block().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteHashes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteHashes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteHashes::GetClassData() const { return &_class_data_; }


void VoteHashes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteHashes*>(&to_msg);
  auto& from = static_cast<const VoteHashes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.VoteHashes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proposal().empty()) {
    _this->_internal_set_proposal(from._internal_proposal());
  }
  if (!from._internal_block().empty()) {
    _this->_internal_set_block(from._internal_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteHashes::CopyFrom(const VoteHashes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.VoteHashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteHashes::IsInitialized() const {
  return true;
}

void VoteHashes::InternalSwap(VoteHashes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proposal_, lhs_arena,
      &other->_impl_.proposal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_, lhs_arena,
      &other->_impl_.block_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteHashes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yac_2eproto_getter, &descriptor_table_yac_2eproto_once,
      file_level_metadata_yac_2eproto[2]);
}

// ===================================================================

class Hash::_Internal {
 public:
  static const ::iroha::consensus::yac::proto::VoteRound& vote_round(const Hash* msg);
  static const ::iroha::consensus::yac::proto::VoteHashes& vote_hashes(const Hash* msg);
  static const ::iroha::consensus::yac::proto::Signature& block_signature(const Hash* msg);
};

const ::iroha::consensus::yac::proto::VoteRound&
Hash::_Internal::vote_round(const Hash* msg) {
  return *msg->_impl_.vote_round_;
}
const ::iroha::consensus::yac::proto::VoteHashes&
Hash::_Internal::vote_hashes(const Hash* msg) {
  return *msg->_impl_.vote_hashes_;
}
const ::iroha::consensus::yac::proto::Signature&
Hash::_Internal::block_signature(const Hash* msg) {
  return *msg->_impl_.block_signature_;
}
Hash::Hash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.Hash)
}
Hash::Hash(const Hash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Hash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vote_round_){nullptr}
    , decltype(_impl_.vote_hashes_){nullptr}
    , decltype(_impl_.block_signature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vote_round()) {
    _this->_impl_.vote_round_ = new ::iroha::consensus::yac::proto::VoteRound(*from._impl_.vote_round_);
  }
  if (from._internal_has_vote_hashes()) {
    _this->_impl_.vote_hashes_ = new ::iroha::consensus::yac::proto::VoteHashes(*from._impl_.vote_hashes_);
  }
  if (from._internal_has_block_signature()) {
    _this->_impl_.block_signature_ = new ::iroha::consensus::yac::proto::Signature(*from._impl_.block_signature_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.Hash)
}

inline void Hash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vote_round_){nullptr}
    , decltype(_impl_.vote_hashes_){nullptr}
    , decltype(_impl_.block_signature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Hash::~Hash() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.Hash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vote_round_;
  if (this != internal_default_instance()) delete _impl_.vote_hashes_;
  if (this != internal_default_instance()) delete _impl_.block_signature_;
}

void Hash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Hash::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.Hash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vote_round_ != nullptr) {
    delete _impl_.vote_round_;
  }
  _impl_.vote_round_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vote_hashes_ != nullptr) {
    delete _impl_.vote_hashes_;
  }
  _impl_.vote_hashes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.block_signature_ != nullptr) {
    delete _impl_.block_signature_;
  }
  _impl_.block_signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.consensus.yac.proto.VoteRound vote_round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_round(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.consensus.yac.proto.VoteHashes vote_hashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_hashes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.consensus.yac.proto.Signature block_signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.Hash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.consensus.yac.proto.VoteRound vote_round = 1;
  if (this->_internal_has_vote_round()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vote_round(this),
        _Internal::vote_round(this).GetCachedSize(), target, stream);
  }

  // .iroha.consensus.yac.proto.VoteHashes vote_hashes = 2;
  if (this->_internal_has_vote_hashes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vote_hashes(this),
        _Internal::vote_hashes(this).GetCachedSize(), target, stream);
  }

  // .iroha.consensus.yac.proto.Signature block_signature = 3;
  if (this->_internal_has_block_signature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::block_signature(this),
        _Internal::block_signature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.Hash)
  return target;
}

size_t Hash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.Hash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.consensus.yac.proto.VoteRound vote_round = 1;
  if (this->_internal_has_vote_round()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vote_round_);
  }

  // .iroha.consensus.yac.proto.VoteHashes vote_hashes = 2;
  if (this->_internal_has_vote_hashes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vote_hashes_);
  }

  // .iroha.consensus.yac.proto.Signature block_signature = 3;
  if (this->_internal_has_block_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_signature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Hash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hash::GetClassData() const { return &_class_data_; }


void Hash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Hash*>(&to_msg);
  auto& from = static_cast<const Hash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.Hash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vote_round()) {
    _this->_internal_mutable_vote_round()->::iroha::consensus::yac::proto::VoteRound::MergeFrom(
        from._internal_vote_round());
  }
  if (from._internal_has_vote_hashes()) {
    _this->_internal_mutable_vote_hashes()->::iroha::consensus::yac::proto::VoteHashes::MergeFrom(
        from._internal_vote_hashes());
  }
  if (from._internal_has_block_signature()) {
    _this->_internal_mutable_block_signature()->::iroha::consensus::yac::proto::Signature::MergeFrom(
        from._internal_block_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hash::CopyFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hash::IsInitialized() const {
  return true;
}

void Hash::InternalSwap(Hash* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hash, _impl_.block_signature_)
      + sizeof(Hash::_impl_.block_signature_)
      - PROTOBUF_FIELD_OFFSET(Hash, _impl_.vote_round_)>(
          reinterpret_cast<char*>(&_impl_.vote_round_),
          reinterpret_cast<char*>(&other->_impl_.vote_round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yac_2eproto_getter, &descriptor_table_yac_2eproto_once,
      file_level_metadata_yac_2eproto[3]);
}

// ===================================================================

class Vote::_Internal {
 public:
  static const ::iroha::consensus::yac::proto::Hash& hash(const Vote* msg);
  static const ::iroha::consensus::yac::proto::Signature& signature(const Vote* msg);
};

const ::iroha::consensus::yac::proto::Hash&
Vote::_Internal::hash(const Vote* msg) {
  return *msg->_impl_.hash_;
}
const ::iroha::consensus::yac::proto::Signature&
Vote::_Internal::signature(const Vote* msg) {
  return *msg->_impl_.signature_;
}
Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hash()) {
    _this->_impl_.hash_ = new ::iroha::consensus::yac::proto::Hash(*from._impl_.hash_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::iroha::consensus::yac::proto::Signature(*from._impl_.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.Vote)
}

inline void Vote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.Vote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hash_;
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void Vote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.Vote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hash_ != nullptr) {
    delete _impl_.hash_;
  }
  _impl_.hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.signature_ != nullptr) {
    delete _impl_.signature_;
  }
  _impl_.signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.consensus.yac.proto.Hash hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.consensus.yac.proto.Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.Vote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.consensus.yac.proto.Hash hash = 1;
  if (this->_internal_has_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hash(this),
        _Internal::hash(this).GetCachedSize(), target, stream);
  }

  // .iroha.consensus.yac.proto.Signature signature = 2;
  if (this->_internal_has_signature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.Vote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.consensus.yac.proto.Hash hash = 1;
  if (this->_internal_has_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hash_);
  }

  // .iroha.consensus.yac.proto.Signature signature = 2;
  if (this->_internal_has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vote::GetClassData() const { return &_class_data_; }


void Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vote*>(&to_msg);
  auto& from = static_cast<const Vote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.Vote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hash()) {
    _this->_internal_mutable_hash()->::iroha::consensus::yac::proto::Hash::MergeFrom(
        from._internal_hash());
  }
  if (from._internal_has_signature()) {
    _this->_internal_mutable_signature()->::iroha::consensus::yac::proto::Signature::MergeFrom(
        from._internal_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vote, _impl_.signature_)
      + sizeof(Vote::_impl_.signature_)
      - PROTOBUF_FIELD_OFFSET(Vote, _impl_.hash_)>(
          reinterpret_cast<char*>(&_impl_.hash_),
          reinterpret_cast<char*>(&other->_impl_.hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yac_2eproto_getter, &descriptor_table_yac_2eproto_once,
      file_level_metadata_yac_2eproto[4]);
}

// ===================================================================

class State::_Internal {
 public:
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  State* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.votes_){from._impl_.votes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.State)
}

inline void State::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.votes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

State::~State() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.State)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.votes_.~RepeatedPtrField();
}

void State::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iroha.consensus.yac.proto.Vote votes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.consensus.yac.proto.Vote votes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_votes_size()); i < n; i++) {
    const auto& repfield = this->_internal_votes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.consensus.yac.proto.Vote votes = 1;
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->_impl_.votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State::GetClassData() const { return &_class_data_; }


void State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<State*>(&to_msg);
  auto& from = static_cast<const State&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.State)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.votes_.MergeFrom(from._impl_.votes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.votes_.InternalSwap(&other->_impl_.votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yac_2eproto_getter, &descriptor_table_yac_2eproto_once,
      file_level_metadata_yac_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace yac
}  // namespace consensus
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::Signature*
Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::Signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::VoteRound*
Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::VoteRound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::VoteRound >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::VoteHashes*
Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::VoteHashes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::VoteHashes >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::Hash*
Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::Hash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::Hash >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::Vote*
Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::State*
Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::State >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
