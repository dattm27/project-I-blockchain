// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: queries.proto

#include "queries.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace iroha {
namespace protocol {
PROTOBUF_CONSTEXPR Ordering_FieldOrdering::Ordering_FieldOrdering(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Ordering_FieldOrderingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ordering_FieldOrderingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ordering_FieldOrderingDefaultTypeInternal() {}
  union {
    Ordering_FieldOrdering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ordering_FieldOrderingDefaultTypeInternal _Ordering_FieldOrdering_default_instance_;
PROTOBUF_CONSTEXPR Ordering::Ordering(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sequence_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderingDefaultTypeInternal() {}
  union {
    Ordering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderingDefaultTypeInternal _Ordering_default_instance_;
PROTOBUF_CONSTEXPR TxPaginationMeta::TxPaginationMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ordering_)*/nullptr
  , /*decltype(_impl_.page_size_)*/0u
  , /*decltype(_impl_.opt_first_tx_hash_)*/{}
  , /*decltype(_impl_.opt_first_tx_time_)*/{}
  , /*decltype(_impl_.opt_last_tx_time_)*/{}
  , /*decltype(_impl_.opt_first_tx_height_)*/{}
  , /*decltype(_impl_.opt_last_tx_height_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TxPaginationMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxPaginationMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxPaginationMetaDefaultTypeInternal() {}
  union {
    TxPaginationMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxPaginationMetaDefaultTypeInternal _TxPaginationMeta_default_instance_;
PROTOBUF_CONSTEXPR AssetPaginationMeta::AssetPaginationMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_size_)*/0u
  , /*decltype(_impl_.opt_first_asset_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AssetPaginationMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetPaginationMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetPaginationMetaDefaultTypeInternal() {}
  union {
    AssetPaginationMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetPaginationMetaDefaultTypeInternal _AssetPaginationMeta_default_instance_;
PROTOBUF_CONSTEXPR GetAccount::GetAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountDefaultTypeInternal() {}
  union {
    GetAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountDefaultTypeInternal _GetAccount_default_instance_;
PROTOBUF_CONSTEXPR GetBlock::GetBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlockDefaultTypeInternal() {}
  union {
    GetBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlockDefaultTypeInternal _GetBlock_default_instance_;
PROTOBUF_CONSTEXPR GetSignatories::GetSignatories(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSignatoriesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSignatoriesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSignatoriesDefaultTypeInternal() {}
  union {
    GetSignatories _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSignatoriesDefaultTypeInternal _GetSignatories_default_instance_;
PROTOBUF_CONSTEXPR GetAccountTransactions::GetAccountTransactions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccountTransactionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountTransactionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountTransactionsDefaultTypeInternal() {}
  union {
    GetAccountTransactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountTransactionsDefaultTypeInternal _GetAccountTransactions_default_instance_;
PROTOBUF_CONSTEXPR GetAccountAssetTransactions::GetAccountAssetTransactions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccountAssetTransactionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountAssetTransactionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountAssetTransactionsDefaultTypeInternal() {}
  union {
    GetAccountAssetTransactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountAssetTransactionsDefaultTypeInternal _GetAccountAssetTransactions_default_instance_;
PROTOBUF_CONSTEXPR GetTransactions::GetTransactions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTransactionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTransactionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTransactionsDefaultTypeInternal() {}
  union {
    GetTransactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTransactionsDefaultTypeInternal _GetTransactions_default_instance_;
PROTOBUF_CONSTEXPR GetAccountAssets::GetAccountAssets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccountAssetsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountAssetsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountAssetsDefaultTypeInternal() {}
  union {
    GetAccountAssets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountAssetsDefaultTypeInternal _GetAccountAssets_default_instance_;
PROTOBUF_CONSTEXPR AccountDetailPaginationMeta::AccountDetailPaginationMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.first_record_id_)*/nullptr
  , /*decltype(_impl_.page_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountDetailPaginationMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountDetailPaginationMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountDetailPaginationMetaDefaultTypeInternal() {}
  union {
    AccountDetailPaginationMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountDetailPaginationMetaDefaultTypeInternal _AccountDetailPaginationMeta_default_instance_;
PROTOBUF_CONSTEXPR GetAccountDetail::GetAccountDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pagination_meta_)*/nullptr
  , /*decltype(_impl_.opt_account_id_)*/{}
  , /*decltype(_impl_.opt_key_)*/{}
  , /*decltype(_impl_.opt_writer_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetAccountDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountDetailDefaultTypeInternal() {}
  union {
    GetAccountDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountDetailDefaultTypeInternal _GetAccountDetail_default_instance_;
PROTOBUF_CONSTEXPR GetAssetInfo::GetAssetInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAssetInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetInfoDefaultTypeInternal() {}
  union {
    GetAssetInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetInfoDefaultTypeInternal _GetAssetInfo_default_instance_;
PROTOBUF_CONSTEXPR GetRoles::GetRoles(
    ::_pbi::ConstantInitialized) {}
struct GetRolesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRolesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRolesDefaultTypeInternal() {}
  union {
    GetRoles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRolesDefaultTypeInternal _GetRoles_default_instance_;
PROTOBUF_CONSTEXPR GetRolePermissions::GetRolePermissions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRolePermissionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRolePermissionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRolePermissionsDefaultTypeInternal() {}
  union {
    GetRolePermissions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRolePermissionsDefaultTypeInternal _GetRolePermissions_default_instance_;
PROTOBUF_CONSTEXPR GetPendingTransactions::GetPendingTransactions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pagination_meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPendingTransactionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPendingTransactionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPendingTransactionsDefaultTypeInternal() {}
  union {
    GetPendingTransactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPendingTransactionsDefaultTypeInternal _GetPendingTransactions_default_instance_;
PROTOBUF_CONSTEXPR GetPeers::GetPeers(
    ::_pbi::ConstantInitialized) {}
struct GetPeersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPeersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPeersDefaultTypeInternal() {}
  union {
    GetPeers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPeersDefaultTypeInternal _GetPeers_default_instance_;
PROTOBUF_CONSTEXPR QueryPayloadMeta::QueryPayloadMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.creator_account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_time_)*/uint64_t{0u}
  , /*decltype(_impl_.query_counter_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPayloadMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPayloadMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPayloadMetaDefaultTypeInternal() {}
  union {
    QueryPayloadMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPayloadMetaDefaultTypeInternal _QueryPayloadMeta_default_instance_;
PROTOBUF_CONSTEXPR GetEngineReceipts::GetEngineReceipts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetEngineReceiptsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEngineReceiptsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEngineReceiptsDefaultTypeInternal() {}
  union {
    GetEngineReceipts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEngineReceiptsDefaultTypeInternal _GetEngineReceipts_default_instance_;
PROTOBUF_CONSTEXPR Query_Payload::Query_Payload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meta_)*/nullptr
  , /*decltype(_impl_.query_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Query_PayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_PayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_PayloadDefaultTypeInternal() {}
  union {
    Query_Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_PayloadDefaultTypeInternal _Query_Payload_default_instance_;
PROTOBUF_CONSTEXPR Query::Query(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDefaultTypeInternal() {}
  union {
    Query _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDefaultTypeInternal _Query_default_instance_;
PROTOBUF_CONSTEXPR BlocksQuery::BlocksQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meta_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlocksQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlocksQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlocksQueryDefaultTypeInternal() {}
  union {
    BlocksQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlocksQueryDefaultTypeInternal _BlocksQuery_default_instance_;
}  // namespace protocol
}  // namespace iroha
static ::_pb::Metadata file_level_metadata_queries_2eproto[23];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_queries_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_queries_2eproto = nullptr;

const uint32_t TableStruct_queries_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering_FieldOrdering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering_FieldOrdering, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering_FieldOrdering, _impl_.direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering, _impl_.sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _impl_.page_size_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _impl_.ordering_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _impl_.opt_first_tx_hash_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _impl_.opt_first_tx_time_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _impl_.opt_last_tx_time_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _impl_.opt_first_tx_height_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _impl_.opt_last_tx_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetPaginationMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetPaginationMeta, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetPaginationMeta, _impl_.page_size_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetPaginationMeta, _impl_.opt_first_asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccount, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetBlock, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetSignatories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetSignatories, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountTransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountTransactions, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountTransactions, _impl_.pagination_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssetTransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssetTransactions, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssetTransactions, _impl_.asset_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssetTransactions, _impl_.pagination_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetTransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetTransactions, _impl_.tx_hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssets, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssets, _impl_.pagination_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailPaginationMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailPaginationMeta, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailPaginationMeta, _impl_.first_record_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, _impl_.pagination_meta_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, _impl_.opt_account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, _impl_.opt_key_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, _impl_.opt_writer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAssetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAssetInfo, _impl_.asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetRoles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetRolePermissions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetRolePermissions, _impl_.role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetPendingTransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetPendingTransactions, _impl_.pagination_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetPeers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryPayloadMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryPayloadMeta, _impl_.created_time_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryPayloadMeta, _impl_.creator_account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryPayloadMeta, _impl_.query_counter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetEngineReceipts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetEngineReceipts, _impl_.tx_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query_Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query_Payload, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query_Payload, _impl_.meta_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query_Payload, _impl_.query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query, _impl_.signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlocksQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlocksQuery, _impl_.meta_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlocksQuery, _impl_.signature_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::iroha::protocol::Ordering_FieldOrdering)},
  { 8, -1, -1, sizeof(::iroha::protocol::Ordering)},
  { 15, -1, -1, sizeof(::iroha::protocol::TxPaginationMeta)},
  { 33, -1, -1, sizeof(::iroha::protocol::AssetPaginationMeta)},
  { 42, -1, -1, sizeof(::iroha::protocol::GetAccount)},
  { 49, -1, -1, sizeof(::iroha::protocol::GetBlock)},
  { 56, -1, -1, sizeof(::iroha::protocol::GetSignatories)},
  { 63, -1, -1, sizeof(::iroha::protocol::GetAccountTransactions)},
  { 71, -1, -1, sizeof(::iroha::protocol::GetAccountAssetTransactions)},
  { 80, -1, -1, sizeof(::iroha::protocol::GetTransactions)},
  { 87, -1, -1, sizeof(::iroha::protocol::GetAccountAssets)},
  { 95, -1, -1, sizeof(::iroha::protocol::AccountDetailPaginationMeta)},
  { 103, -1, -1, sizeof(::iroha::protocol::GetAccountDetail)},
  { 116, -1, -1, sizeof(::iroha::protocol::GetAssetInfo)},
  { 123, -1, -1, sizeof(::iroha::protocol::GetRoles)},
  { 129, -1, -1, sizeof(::iroha::protocol::GetRolePermissions)},
  { 136, -1, -1, sizeof(::iroha::protocol::GetPendingTransactions)},
  { 143, -1, -1, sizeof(::iroha::protocol::GetPeers)},
  { 149, -1, -1, sizeof(::iroha::protocol::QueryPayloadMeta)},
  { 158, -1, -1, sizeof(::iroha::protocol::GetEngineReceipts)},
  { 165, -1, -1, sizeof(::iroha::protocol::Query_Payload)},
  { 187, -1, -1, sizeof(::iroha::protocol::Query)},
  { 195, -1, -1, sizeof(::iroha::protocol::BlocksQuery)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::iroha::protocol::_Ordering_FieldOrdering_default_instance_._instance,
  &::iroha::protocol::_Ordering_default_instance_._instance,
  &::iroha::protocol::_TxPaginationMeta_default_instance_._instance,
  &::iroha::protocol::_AssetPaginationMeta_default_instance_._instance,
  &::iroha::protocol::_GetAccount_default_instance_._instance,
  &::iroha::protocol::_GetBlock_default_instance_._instance,
  &::iroha::protocol::_GetSignatories_default_instance_._instance,
  &::iroha::protocol::_GetAccountTransactions_default_instance_._instance,
  &::iroha::protocol::_GetAccountAssetTransactions_default_instance_._instance,
  &::iroha::protocol::_GetTransactions_default_instance_._instance,
  &::iroha::protocol::_GetAccountAssets_default_instance_._instance,
  &::iroha::protocol::_AccountDetailPaginationMeta_default_instance_._instance,
  &::iroha::protocol::_GetAccountDetail_default_instance_._instance,
  &::iroha::protocol::_GetAssetInfo_default_instance_._instance,
  &::iroha::protocol::_GetRoles_default_instance_._instance,
  &::iroha::protocol::_GetRolePermissions_default_instance_._instance,
  &::iroha::protocol::_GetPendingTransactions_default_instance_._instance,
  &::iroha::protocol::_GetPeers_default_instance_._instance,
  &::iroha::protocol::_QueryPayloadMeta_default_instance_._instance,
  &::iroha::protocol::_GetEngineReceipts_default_instance_._instance,
  &::iroha::protocol::_Query_Payload_default_instance_._instance,
  &::iroha::protocol::_Query_default_instance_._instance,
  &::iroha::protocol::_BlocksQuery_default_instance_._instance,
};

const char descriptor_table_protodef_queries_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rqueries.proto\022\016iroha.protocol\032\017primiti"
  "ve.proto\032\037google/protobuf/timestamp.prot"
  "o\"\251\001\n\010Ordering\0228\n\010sequence\030\001 \003(\0132&.iroha"
  ".protocol.Ordering.FieldOrdering\032c\n\rFiel"
  "dOrdering\022$\n\005field\030\001 \001(\0162\025.iroha.protoco"
  "l.Field\022,\n\tdirection\030\002 \001(\0162\031.iroha.proto"
  "col.Direction\"\363\002\n\020TxPaginationMeta\022\021\n\tpa"
  "ge_size\030\001 \001(\r\022\027\n\rfirst_tx_hash\030\002 \001(\tH\000\022*"
  "\n\010ordering\030\003 \001(\0132\030.iroha.protocol.Orderi"
  "ng\0223\n\rfirst_tx_time\030\004 \001(\0132\032.google.proto"
  "buf.TimestampH\001\0222\n\014last_tx_time\030\005 \001(\0132\032."
  "google.protobuf.TimestampH\002\022\031\n\017first_tx_"
  "height\030\006 \001(\004H\003\022\030\n\016last_tx_height\030\007 \001(\004H\004"
  "B\023\n\021opt_first_tx_hashB\023\n\021opt_first_tx_ti"
  "meB\022\n\020opt_last_tx_timeB\025\n\023opt_first_tx_h"
  "eightB\024\n\022opt_last_tx_height\"X\n\023AssetPagi"
  "nationMeta\022\021\n\tpage_size\030\001 \001(\r\022\030\n\016first_a"
  "sset_id\030\002 \001(\tH\000B\024\n\022opt_first_asset_id\" \n"
  "\nGetAccount\022\022\n\naccount_id\030\001 \001(\t\"\032\n\010GetBl"
  "ock\022\016\n\006height\030\001 \001(\004\"$\n\016GetSignatories\022\022\n"
  "\naccount_id\030\001 \001(\t\"g\n\026GetAccountTransacti"
  "ons\022\022\n\naccount_id\030\001 \001(\t\0229\n\017pagination_me"
  "ta\030\002 \001(\0132 .iroha.protocol.TxPaginationMe"
  "ta\"~\n\033GetAccountAssetTransactions\022\022\n\nacc"
  "ount_id\030\001 \001(\t\022\020\n\010asset_id\030\002 \001(\t\0229\n\017pagin"
  "ation_meta\030\003 \001(\0132 .iroha.protocol.TxPagi"
  "nationMeta\"$\n\017GetTransactions\022\021\n\ttx_hash"
  "es\030\001 \003(\t\"d\n\020GetAccountAssets\022\022\n\naccount_"
  "id\030\001 \001(\t\022<\n\017pagination_meta\030\002 \001(\0132#.iroh"
  "a.protocol.AssetPaginationMeta\"p\n\033Accoun"
  "tDetailPaginationMeta\022\021\n\tpage_size\030\001 \001(\r"
  "\022>\n\017first_record_id\030\002 \001(\0132%.iroha.protoc"
  "ol.AccountDetailRecordId\"\272\001\n\020GetAccountD"
  "etail\022\024\n\naccount_id\030\001 \001(\tH\000\022\r\n\003key\030\002 \001(\t"
  "H\001\022\020\n\006writer\030\003 \001(\tH\002\022D\n\017pagination_meta\030"
  "\004 \001(\0132+.iroha.protocol.AccountDetailPagi"
  "nationMetaB\020\n\016opt_account_idB\t\n\007opt_keyB"
  "\014\n\nopt_writer\" \n\014GetAssetInfo\022\020\n\010asset_i"
  "d\030\001 \001(\t\"\n\n\010GetRoles\"%\n\022GetRolePermission"
  "s\022\017\n\007role_id\030\001 \001(\t\"S\n\026GetPendingTransact"
  "ions\0229\n\017pagination_meta\030\001 \001(\0132 .iroha.pr"
  "otocol.TxPaginationMeta\"\n\n\010GetPeers\"[\n\020Q"
  "ueryPayloadMeta\022\024\n\014created_time\030\001 \001(\004\022\032\n"
  "\022creator_account_id\030\002 \001(\t\022\025\n\rquery_count"
  "er\030\003 \001(\004\"$\n\021GetEngineReceipts\022\017\n\007tx_hash"
  "\030\001 \001(\t\"\217\010\n\005Query\022.\n\007payload\030\001 \001(\0132\035.iroh"
  "a.protocol.Query.Payload\022,\n\tsignature\030\002 "
  "\001(\0132\031.iroha.protocol.Signature\032\247\007\n\007Paylo"
  "ad\022.\n\004meta\030\001 \001(\0132 .iroha.protocol.QueryP"
  "ayloadMeta\0221\n\013get_account\030\003 \001(\0132\032.iroha."
  "protocol.GetAccountH\000\0229\n\017get_signatories"
  "\030\004 \001(\0132\036.iroha.protocol.GetSignatoriesH\000"
  "\022J\n\030get_account_transactions\030\005 \001(\0132&.iro"
  "ha.protocol.GetAccountTransactionsH\000\022U\n\036"
  "get_account_asset_transactions\030\006 \001(\0132+.i"
  "roha.protocol.GetAccountAssetTransaction"
  "sH\000\022;\n\020get_transactions\030\007 \001(\0132\037.iroha.pr"
  "otocol.GetTransactionsH\000\022>\n\022get_account_"
  "assets\030\010 \001(\0132 .iroha.protocol.GetAccount"
  "AssetsH\000\022>\n\022get_account_detail\030\t \001(\0132 .i"
  "roha.protocol.GetAccountDetailH\000\022-\n\tget_"
  "roles\030\n \001(\0132\030.iroha.protocol.GetRolesH\000\022"
  "B\n\024get_role_permissions\030\013 \001(\0132\".iroha.pr"
  "otocol.GetRolePermissionsH\000\0226\n\016get_asset"
  "_info\030\014 \001(\0132\034.iroha.protocol.GetAssetInf"
  "oH\000\022J\n\030get_pending_transactions\030\r \001(\0132&."
  "iroha.protocol.GetPendingTransactionsH\000\022"
  "-\n\tget_block\030\016 \001(\0132\030.iroha.protocol.GetB"
  "lockH\000\022-\n\tget_peers\030\017 \001(\0132\030.iroha.protoc"
  "ol.GetPeersH\000\022@\n\023get_engine_receipts\030\020 \001"
  "(\0132!.iroha.protocol.GetEngineReceiptsH\000B"
  "\007\n\005query\"k\n\013BlocksQuery\022.\n\004meta\030\001 \001(\0132 ."
  "iroha.protocol.QueryPayloadMeta\022,\n\tsigna"
  "ture\030\002 \001(\0132\031.iroha.protocol.Signature*(\n"
  "\005Field\022\020\n\014kCreatedTime\020\000\022\r\n\tkPosition\020\001*"
  ",\n\tDirection\022\016\n\nkAscending\020\000\022\017\n\013kDescend"
  "ing\020\001B\032Z\030iroha.generated/protocolb\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_queries_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_primitive_2eproto,
};
static ::_pbi::once_flag descriptor_table_queries_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_queries_2eproto = {
    false, false, 3081, descriptor_table_protodef_queries_2eproto,
    "queries.proto",
    &descriptor_table_queries_2eproto_once, descriptor_table_queries_2eproto_deps, 2, 23,
    schemas, file_default_instances, TableStruct_queries_2eproto::offsets,
    file_level_metadata_queries_2eproto, file_level_enum_descriptors_queries_2eproto,
    file_level_service_descriptors_queries_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_queries_2eproto_getter() {
  return &descriptor_table_queries_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_queries_2eproto(&descriptor_table_queries_2eproto);
namespace iroha {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Field_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_queries_2eproto);
  return file_level_enum_descriptors_queries_2eproto[0];
}
bool Field_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_queries_2eproto);
  return file_level_enum_descriptors_queries_2eproto[1];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Ordering_FieldOrdering::_Internal {
 public:
};

Ordering_FieldOrdering::Ordering_FieldOrdering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Ordering.FieldOrdering)
}
Ordering_FieldOrdering::Ordering_FieldOrdering(const Ordering_FieldOrdering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ordering_FieldOrdering* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.field_, &from._impl_.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Ordering.FieldOrdering)
}

inline void Ordering_FieldOrdering::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){0}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ordering_FieldOrdering::~Ordering_FieldOrdering() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Ordering.FieldOrdering)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ordering_FieldOrdering::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ordering_FieldOrdering::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ordering_FieldOrdering::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Ordering.FieldOrdering)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ordering_FieldOrdering::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.protocol.Field field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_field(static_cast<::iroha::protocol::Field>(val));
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::iroha::protocol::Direction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ordering_FieldOrdering::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Ordering.FieldOrdering)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Field field = 1;
  if (this->_internal_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_field(), target);
  }

  // .iroha.protocol.Direction direction = 2;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Ordering.FieldOrdering)
  return target;
}

size_t Ordering_FieldOrdering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Ordering.FieldOrdering)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Field field = 1;
  if (this->_internal_field() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_field());
  }

  // .iroha.protocol.Direction direction = 2;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ordering_FieldOrdering::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ordering_FieldOrdering::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ordering_FieldOrdering::GetClassData() const { return &_class_data_; }


void Ordering_FieldOrdering::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ordering_FieldOrdering*>(&to_msg);
  auto& from = static_cast<const Ordering_FieldOrdering&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Ordering.FieldOrdering)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_field() != 0) {
    _this->_internal_set_field(from._internal_field());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ordering_FieldOrdering::CopyFrom(const Ordering_FieldOrdering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Ordering.FieldOrdering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ordering_FieldOrdering::IsInitialized() const {
  return true;
}

void Ordering_FieldOrdering::InternalSwap(Ordering_FieldOrdering* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ordering_FieldOrdering, _impl_.direction_)
      + sizeof(Ordering_FieldOrdering::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(Ordering_FieldOrdering, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ordering_FieldOrdering::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[0]);
}

// ===================================================================

class Ordering::_Internal {
 public:
};

Ordering::Ordering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Ordering)
}
Ordering::Ordering(const Ordering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ordering* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sequence_){from._impl_.sequence_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Ordering)
}

inline void Ordering::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sequence_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ordering::~Ordering() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Ordering)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ordering::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sequence_.~RepeatedPtrField();
}

void Ordering::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ordering::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Ordering)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sequence_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ordering::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Ordering.FieldOrdering sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sequence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ordering::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Ordering)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Ordering.FieldOrdering sequence = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sequence_size()); i < n; i++) {
    const auto& repfield = this->_internal_sequence(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Ordering)
  return target;
}

size_t Ordering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Ordering)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Ordering.FieldOrdering sequence = 1;
  total_size += 1UL * this->_internal_sequence_size();
  for (const auto& msg : this->_impl_.sequence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ordering::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ordering::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ordering::GetClassData() const { return &_class_data_; }


void Ordering::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ordering*>(&to_msg);
  auto& from = static_cast<const Ordering&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Ordering)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sequence_.MergeFrom(from._impl_.sequence_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ordering::CopyFrom(const Ordering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Ordering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ordering::IsInitialized() const {
  return true;
}

void Ordering::InternalSwap(Ordering* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sequence_.InternalSwap(&other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ordering::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[1]);
}

// ===================================================================

class TxPaginationMeta::_Internal {
 public:
  static const ::iroha::protocol::Ordering& ordering(const TxPaginationMeta* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& first_tx_time(const TxPaginationMeta* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_tx_time(const TxPaginationMeta* msg);
};

const ::iroha::protocol::Ordering&
TxPaginationMeta::_Internal::ordering(const TxPaginationMeta* msg) {
  return *msg->_impl_.ordering_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TxPaginationMeta::_Internal::first_tx_time(const TxPaginationMeta* msg) {
  return *msg->_impl_.opt_first_tx_time_.first_tx_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TxPaginationMeta::_Internal::last_tx_time(const TxPaginationMeta* msg) {
  return *msg->_impl_.opt_last_tx_time_.last_tx_time_;
}
void TxPaginationMeta::set_allocated_first_tx_time(::PROTOBUF_NAMESPACE_ID::Timestamp* first_tx_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_opt_first_tx_time();
  if (first_tx_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_tx_time));
    if (message_arena != submessage_arena) {
      first_tx_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_tx_time, submessage_arena);
    }
    set_has_first_tx_time();
    _impl_.opt_first_tx_time_.first_tx_time_ = first_tx_time;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.TxPaginationMeta.first_tx_time)
}
void TxPaginationMeta::clear_first_tx_time() {
  if (_internal_has_first_tx_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.opt_first_tx_time_.first_tx_time_;
    }
    clear_has_opt_first_tx_time();
  }
}
void TxPaginationMeta::set_allocated_last_tx_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_tx_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_opt_last_tx_time();
  if (last_tx_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_tx_time));
    if (message_arena != submessage_arena) {
      last_tx_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_tx_time, submessage_arena);
    }
    set_has_last_tx_time();
    _impl_.opt_last_tx_time_.last_tx_time_ = last_tx_time;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.TxPaginationMeta.last_tx_time)
}
void TxPaginationMeta::clear_last_tx_time() {
  if (_internal_has_last_tx_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.opt_last_tx_time_.last_tx_time_;
    }
    clear_has_opt_last_tx_time();
  }
}
TxPaginationMeta::TxPaginationMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.TxPaginationMeta)
}
TxPaginationMeta::TxPaginationMeta(const TxPaginationMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxPaginationMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ordering_){nullptr}
    , decltype(_impl_.page_size_){}
    , decltype(_impl_.opt_first_tx_hash_){}
    , decltype(_impl_.opt_first_tx_time_){}
    , decltype(_impl_.opt_last_tx_time_){}
    , decltype(_impl_.opt_first_tx_height_){}
    , decltype(_impl_.opt_last_tx_height_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ordering()) {
    _this->_impl_.ordering_ = new ::iroha::protocol::Ordering(*from._impl_.ordering_);
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  clear_has_opt_first_tx_hash();
  switch (from.opt_first_tx_hash_case()) {
    case kFirstTxHash: {
      _this->_internal_set_first_tx_hash(from._internal_first_tx_hash());
      break;
    }
    case OPT_FIRST_TX_HASH_NOT_SET: {
      break;
    }
  }
  clear_has_opt_first_tx_time();
  switch (from.opt_first_tx_time_case()) {
    case kFirstTxTime: {
      _this->_internal_mutable_first_tx_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_first_tx_time());
      break;
    }
    case OPT_FIRST_TX_TIME_NOT_SET: {
      break;
    }
  }
  clear_has_opt_last_tx_time();
  switch (from.opt_last_tx_time_case()) {
    case kLastTxTime: {
      _this->_internal_mutable_last_tx_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_last_tx_time());
      break;
    }
    case OPT_LAST_TX_TIME_NOT_SET: {
      break;
    }
  }
  clear_has_opt_first_tx_height();
  switch (from.opt_first_tx_height_case()) {
    case kFirstTxHeight: {
      _this->_internal_set_first_tx_height(from._internal_first_tx_height());
      break;
    }
    case OPT_FIRST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  clear_has_opt_last_tx_height();
  switch (from.opt_last_tx_height_case()) {
    case kLastTxHeight: {
      _this->_internal_set_last_tx_height(from._internal_last_tx_height());
      break;
    }
    case OPT_LAST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.TxPaginationMeta)
}

inline void TxPaginationMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ordering_){nullptr}
    , decltype(_impl_.page_size_){0u}
    , decltype(_impl_.opt_first_tx_hash_){}
    , decltype(_impl_.opt_first_tx_time_){}
    , decltype(_impl_.opt_last_tx_time_){}
    , decltype(_impl_.opt_first_tx_height_){}
    , decltype(_impl_.opt_last_tx_height_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_opt_first_tx_hash();
  clear_has_opt_first_tx_time();
  clear_has_opt_last_tx_time();
  clear_has_opt_first_tx_height();
  clear_has_opt_last_tx_height();
}

TxPaginationMeta::~TxPaginationMeta() {
  // @@protoc_insertion_point(destructor:iroha.protocol.TxPaginationMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxPaginationMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ordering_;
  if (has_opt_first_tx_hash()) {
    clear_opt_first_tx_hash();
  }
  if (has_opt_first_tx_time()) {
    clear_opt_first_tx_time();
  }
  if (has_opt_last_tx_time()) {
    clear_opt_last_tx_time();
  }
  if (has_opt_first_tx_height()) {
    clear_opt_first_tx_height();
  }
  if (has_opt_last_tx_height()) {
    clear_opt_last_tx_height();
  }
}

void TxPaginationMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxPaginationMeta::clear_opt_first_tx_hash() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_first_tx_hash_case()) {
    case kFirstTxHash: {
      _impl_.opt_first_tx_hash_.first_tx_hash_.Destroy();
      break;
    }
    case OPT_FIRST_TX_HASH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPT_FIRST_TX_HASH_NOT_SET;
}

void TxPaginationMeta::clear_opt_first_tx_time() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_first_tx_time_case()) {
    case kFirstTxTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.opt_first_tx_time_.first_tx_time_;
      }
      break;
    }
    case OPT_FIRST_TX_TIME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPT_FIRST_TX_TIME_NOT_SET;
}

void TxPaginationMeta::clear_opt_last_tx_time() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_last_tx_time_case()) {
    case kLastTxTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.opt_last_tx_time_.last_tx_time_;
      }
      break;
    }
    case OPT_LAST_TX_TIME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPT_LAST_TX_TIME_NOT_SET;
}

void TxPaginationMeta::clear_opt_first_tx_height() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_first_tx_height_case()) {
    case kFirstTxHeight: {
      // No need to clear
      break;
    }
    case OPT_FIRST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[3] = OPT_FIRST_TX_HEIGHT_NOT_SET;
}

void TxPaginationMeta::clear_opt_last_tx_height() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_last_tx_height_case()) {
    case kLastTxHeight: {
      // No need to clear
      break;
    }
    case OPT_LAST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[4] = OPT_LAST_TX_HEIGHT_NOT_SET;
}


void TxPaginationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.TxPaginationMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ordering_ != nullptr) {
    delete _impl_.ordering_;
  }
  _impl_.ordering_ = nullptr;
  _impl_.page_size_ = 0u;
  clear_opt_first_tx_hash();
  clear_opt_first_tx_time();
  clear_opt_last_tx_time();
  clear_opt_first_tx_height();
  clear_opt_last_tx_height();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxPaginationMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string first_tx_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_first_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.TxPaginationMeta.first_tx_hash"));
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.Ordering ordering = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordering(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_tx_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_tx_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_tx_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_tx_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 first_tx_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_first_tx_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_tx_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_last_tx_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxPaginationMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.TxPaginationMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string first_tx_hash = 2;
  if (_internal_has_first_tx_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_tx_hash().data(), static_cast<int>(this->_internal_first_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.TxPaginationMeta.first_tx_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_tx_hash(), target);
  }

  // .iroha.protocol.Ordering ordering = 3;
  if (this->_internal_has_ordering()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ordering(this),
        _Internal::ordering(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp first_tx_time = 4;
  if (_internal_has_first_tx_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::first_tx_time(this),
        _Internal::first_tx_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_tx_time = 5;
  if (_internal_has_last_tx_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_tx_time(this),
        _Internal::last_tx_time(this).GetCachedSize(), target, stream);
  }

  // uint64 first_tx_height = 6;
  if (_internal_has_first_tx_height()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_first_tx_height(), target);
  }

  // uint64 last_tx_height = 7;
  if (_internal_has_last_tx_height()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_last_tx_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.TxPaginationMeta)
  return target;
}

size_t TxPaginationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.TxPaginationMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Ordering ordering = 3;
  if (this->_internal_has_ordering()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ordering_);
  }

  // uint32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_size());
  }

  switch (opt_first_tx_hash_case()) {
    // string first_tx_hash = 2;
    case kFirstTxHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_first_tx_hash());
      break;
    }
    case OPT_FIRST_TX_HASH_NOT_SET: {
      break;
    }
  }
  switch (opt_first_tx_time_case()) {
    // .google.protobuf.Timestamp first_tx_time = 4;
    case kFirstTxTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.opt_first_tx_time_.first_tx_time_);
      break;
    }
    case OPT_FIRST_TX_TIME_NOT_SET: {
      break;
    }
  }
  switch (opt_last_tx_time_case()) {
    // .google.protobuf.Timestamp last_tx_time = 5;
    case kLastTxTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.opt_last_tx_time_.last_tx_time_);
      break;
    }
    case OPT_LAST_TX_TIME_NOT_SET: {
      break;
    }
  }
  switch (opt_first_tx_height_case()) {
    // uint64 first_tx_height = 6;
    case kFirstTxHeight: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first_tx_height());
      break;
    }
    case OPT_FIRST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  switch (opt_last_tx_height_case()) {
    // uint64 last_tx_height = 7;
    case kLastTxHeight: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_tx_height());
      break;
    }
    case OPT_LAST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxPaginationMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxPaginationMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxPaginationMeta::GetClassData() const { return &_class_data_; }


void TxPaginationMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxPaginationMeta*>(&to_msg);
  auto& from = static_cast<const TxPaginationMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.TxPaginationMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ordering()) {
    _this->_internal_mutable_ordering()->::iroha::protocol::Ordering::MergeFrom(
        from._internal_ordering());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  switch (from.opt_first_tx_hash_case()) {
    case kFirstTxHash: {
      _this->_internal_set_first_tx_hash(from._internal_first_tx_hash());
      break;
    }
    case OPT_FIRST_TX_HASH_NOT_SET: {
      break;
    }
  }
  switch (from.opt_first_tx_time_case()) {
    case kFirstTxTime: {
      _this->_internal_mutable_first_tx_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_first_tx_time());
      break;
    }
    case OPT_FIRST_TX_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.opt_last_tx_time_case()) {
    case kLastTxTime: {
      _this->_internal_mutable_last_tx_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_last_tx_time());
      break;
    }
    case OPT_LAST_TX_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.opt_first_tx_height_case()) {
    case kFirstTxHeight: {
      _this->_internal_set_first_tx_height(from._internal_first_tx_height());
      break;
    }
    case OPT_FIRST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  switch (from.opt_last_tx_height_case()) {
    case kLastTxHeight: {
      _this->_internal_set_last_tx_height(from._internal_last_tx_height());
      break;
    }
    case OPT_LAST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxPaginationMeta::CopyFrom(const TxPaginationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.TxPaginationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxPaginationMeta::IsInitialized() const {
  return true;
}

void TxPaginationMeta::InternalSwap(TxPaginationMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxPaginationMeta, _impl_.page_size_)
      + sizeof(TxPaginationMeta::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(TxPaginationMeta, _impl_.ordering_)>(
          reinterpret_cast<char*>(&_impl_.ordering_),
          reinterpret_cast<char*>(&other->_impl_.ordering_));
  swap(_impl_.opt_first_tx_hash_, other->_impl_.opt_first_tx_hash_);
  swap(_impl_.opt_first_tx_time_, other->_impl_.opt_first_tx_time_);
  swap(_impl_.opt_last_tx_time_, other->_impl_.opt_last_tx_time_);
  swap(_impl_.opt_first_tx_height_, other->_impl_.opt_first_tx_height_);
  swap(_impl_.opt_last_tx_height_, other->_impl_.opt_last_tx_height_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
  swap(_impl_._oneof_case_[3], other->_impl_._oneof_case_[3]);
  swap(_impl_._oneof_case_[4], other->_impl_._oneof_case_[4]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxPaginationMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[2]);
}

// ===================================================================

class AssetPaginationMeta::_Internal {
 public:
};

AssetPaginationMeta::AssetPaginationMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AssetPaginationMeta)
}
AssetPaginationMeta::AssetPaginationMeta(const AssetPaginationMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssetPaginationMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_size_){}
    , decltype(_impl_.opt_first_asset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.page_size_ = from._impl_.page_size_;
  clear_has_opt_first_asset_id();
  switch (from.opt_first_asset_id_case()) {
    case kFirstAssetId: {
      _this->_internal_set_first_asset_id(from._internal_first_asset_id());
      break;
    }
    case OPT_FIRST_ASSET_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AssetPaginationMeta)
}

inline void AssetPaginationMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_size_){0u}
    , decltype(_impl_.opt_first_asset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_opt_first_asset_id();
}

AssetPaginationMeta::~AssetPaginationMeta() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AssetPaginationMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssetPaginationMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_opt_first_asset_id()) {
    clear_opt_first_asset_id();
  }
}

void AssetPaginationMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssetPaginationMeta::clear_opt_first_asset_id() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.AssetPaginationMeta)
  switch (opt_first_asset_id_case()) {
    case kFirstAssetId: {
      _impl_.opt_first_asset_id_.first_asset_id_.Destroy();
      break;
    }
    case OPT_FIRST_ASSET_ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPT_FIRST_ASSET_ID_NOT_SET;
}


void AssetPaginationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AssetPaginationMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.page_size_ = 0u;
  clear_opt_first_asset_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetPaginationMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string first_asset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_first_asset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.AssetPaginationMeta.first_asset_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssetPaginationMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AssetPaginationMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string first_asset_id = 2;
  if (_internal_has_first_asset_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_asset_id().data(), static_cast<int>(this->_internal_first_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AssetPaginationMeta.first_asset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AssetPaginationMeta)
  return target;
}

size_t AssetPaginationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AssetPaginationMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_size());
  }

  switch (opt_first_asset_id_case()) {
    // string first_asset_id = 2;
    case kFirstAssetId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_first_asset_id());
      break;
    }
    case OPT_FIRST_ASSET_ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetPaginationMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssetPaginationMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetPaginationMeta::GetClassData() const { return &_class_data_; }


void AssetPaginationMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssetPaginationMeta*>(&to_msg);
  auto& from = static_cast<const AssetPaginationMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AssetPaginationMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  switch (from.opt_first_asset_id_case()) {
    case kFirstAssetId: {
      _this->_internal_set_first_asset_id(from._internal_first_asset_id());
      break;
    }
    case OPT_FIRST_ASSET_ID_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetPaginationMeta::CopyFrom(const AssetPaginationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AssetPaginationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetPaginationMeta::IsInitialized() const {
  return true;
}

void AssetPaginationMeta::InternalSwap(AssetPaginationMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.page_size_, other->_impl_.page_size_);
  swap(_impl_.opt_first_asset_id_, other->_impl_.opt_first_asset_id_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetPaginationMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[3]);
}

// ===================================================================

class GetAccount::_Internal {
 public:
};

GetAccount::GetAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccount)
}
GetAccount::GetAccount(const GetAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccount)
}

inline void GetAccount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAccount::~GetAccount() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void GetAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetAccount.account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccount.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccount)
  return target;
}

size_t GetAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccount::GetClassData() const { return &_class_data_; }


void GetAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccount*>(&to_msg);
  auto& from = static_cast<const GetAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccount::CopyFrom(const GetAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccount::IsInitialized() const {
  return true;
}

void GetAccount::InternalSwap(GetAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[4]);
}

// ===================================================================

class GetBlock::_Internal {
 public:
};

GetBlock::GetBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetBlock)
}
GetBlock::GetBlock(const GetBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetBlock)
}

inline void GetBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBlock::~GetBlock() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetBlock)
  return target;
}

size_t GetBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlock::GetClassData() const { return &_class_data_; }


void GetBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlock*>(&to_msg);
  auto& from = static_cast<const GetBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlock::CopyFrom(const GetBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlock::IsInitialized() const {
  return true;
}

void GetBlock::InternalSwap(GetBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.height_, other->_impl_.height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[5]);
}

// ===================================================================

class GetSignatories::_Internal {
 public:
};

GetSignatories::GetSignatories(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetSignatories)
}
GetSignatories::GetSignatories(const GetSignatories& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSignatories* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetSignatories)
}

inline void GetSignatories::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSignatories::~GetSignatories() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetSignatories)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSignatories::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
}

void GetSignatories::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSignatories::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetSignatories)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignatories::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetSignatories.account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSignatories::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetSignatories)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetSignatories.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetSignatories)
  return target;
}

size_t GetSignatories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetSignatories)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignatories::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSignatories::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignatories::GetClassData() const { return &_class_data_; }


void GetSignatories::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSignatories*>(&to_msg);
  auto& from = static_cast<const GetSignatories&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetSignatories)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignatories::CopyFrom(const GetSignatories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetSignatories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignatories::IsInitialized() const {
  return true;
}

void GetSignatories::InternalSwap(GetSignatories* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignatories::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[6]);
}

// ===================================================================

class GetAccountTransactions::_Internal {
 public:
  static const ::iroha::protocol::TxPaginationMeta& pagination_meta(const GetAccountTransactions* msg);
};

const ::iroha::protocol::TxPaginationMeta&
GetAccountTransactions::_Internal::pagination_meta(const GetAccountTransactions* msg) {
  return *msg->_impl_.pagination_meta_;
}
GetAccountTransactions::GetAccountTransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccountTransactions)
}
GetAccountTransactions::GetAccountTransactions(const GetAccountTransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountTransactions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.pagination_meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination_meta()) {
    _this->_impl_.pagination_meta_ = new ::iroha::protocol::TxPaginationMeta(*from._impl_.pagination_meta_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccountTransactions)
}

inline void GetAccountTransactions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.pagination_meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAccountTransactions::~GetAccountTransactions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccountTransactions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountTransactions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_meta_;
}

void GetAccountTransactions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountTransactions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccountTransactions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_meta_ != nullptr) {
    delete _impl_.pagination_meta_;
  }
  _impl_.pagination_meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountTransactions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetAccountTransactions.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.TxPaginationMeta pagination_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountTransactions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccountTransactions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountTransactions.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .iroha.protocol.TxPaginationMeta pagination_meta = 2;
  if (this->_internal_has_pagination_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination_meta(this),
        _Internal::pagination_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccountTransactions)
  return target;
}

size_t GetAccountTransactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccountTransactions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .iroha.protocol.TxPaginationMeta pagination_meta = 2;
  if (this->_internal_has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountTransactions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountTransactions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountTransactions::GetClassData() const { return &_class_data_; }


void GetAccountTransactions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountTransactions*>(&to_msg);
  auto& from = static_cast<const GetAccountTransactions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccountTransactions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_pagination_meta()) {
    _this->_internal_mutable_pagination_meta()->::iroha::protocol::TxPaginationMeta::MergeFrom(
        from._internal_pagination_meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountTransactions::CopyFrom(const GetAccountTransactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccountTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountTransactions::IsInitialized() const {
  return true;
}

void GetAccountTransactions::InternalSwap(GetAccountTransactions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  swap(_impl_.pagination_meta_, other->_impl_.pagination_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountTransactions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[7]);
}

// ===================================================================

class GetAccountAssetTransactions::_Internal {
 public:
  static const ::iroha::protocol::TxPaginationMeta& pagination_meta(const GetAccountAssetTransactions* msg);
};

const ::iroha::protocol::TxPaginationMeta&
GetAccountAssetTransactions::_Internal::pagination_meta(const GetAccountAssetTransactions* msg) {
  return *msg->_impl_.pagination_meta_;
}
GetAccountAssetTransactions::GetAccountAssetTransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccountAssetTransactions)
}
GetAccountAssetTransactions::GetAccountAssetTransactions(const GetAccountAssetTransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountAssetTransactions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.asset_id_){}
    , decltype(_impl_.pagination_meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_id().empty()) {
    _this->_impl_.asset_id_.Set(from._internal_asset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination_meta()) {
    _this->_impl_.pagination_meta_ = new ::iroha::protocol::TxPaginationMeta(*from._impl_.pagination_meta_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccountAssetTransactions)
}

inline void GetAccountAssetTransactions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.asset_id_){}
    , decltype(_impl_.pagination_meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAccountAssetTransactions::~GetAccountAssetTransactions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccountAssetTransactions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountAssetTransactions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.asset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_meta_;
}

void GetAccountAssetTransactions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountAssetTransactions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccountAssetTransactions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.asset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_meta_ != nullptr) {
    delete _impl_.pagination_meta_;
  }
  _impl_.pagination_meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAssetTransactions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetAccountAssetTransactions.account_id"));
        } else
          goto handle_unusual;
        continue;
      // string asset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetAccountAssetTransactions.asset_id"));
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.TxPaginationMeta pagination_meta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountAssetTransactions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccountAssetTransactions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountAssetTransactions.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string asset_id = 2;
  if (!this->_internal_asset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountAssetTransactions.asset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset_id(), target);
  }

  // .iroha.protocol.TxPaginationMeta pagination_meta = 3;
  if (this->_internal_has_pagination_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination_meta(this),
        _Internal::pagination_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccountAssetTransactions)
  return target;
}

size_t GetAccountAssetTransactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccountAssetTransactions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string asset_id = 2;
  if (!this->_internal_asset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // .iroha.protocol.TxPaginationMeta pagination_meta = 3;
  if (this->_internal_has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountAssetTransactions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountAssetTransactions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountAssetTransactions::GetClassData() const { return &_class_data_; }


void GetAccountAssetTransactions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountAssetTransactions*>(&to_msg);
  auto& from = static_cast<const GetAccountAssetTransactions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccountAssetTransactions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_asset_id().empty()) {
    _this->_internal_set_asset_id(from._internal_asset_id());
  }
  if (from._internal_has_pagination_meta()) {
    _this->_internal_mutable_pagination_meta()->::iroha::protocol::TxPaginationMeta::MergeFrom(
        from._internal_pagination_meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountAssetTransactions::CopyFrom(const GetAccountAssetTransactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccountAssetTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAssetTransactions::IsInitialized() const {
  return true;
}

void GetAccountAssetTransactions::InternalSwap(GetAccountAssetTransactions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_id_, lhs_arena,
      &other->_impl_.asset_id_, rhs_arena
  );
  swap(_impl_.pagination_meta_, other->_impl_.pagination_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAssetTransactions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[8]);
}

// ===================================================================

class GetTransactions::_Internal {
 public:
};

GetTransactions::GetTransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetTransactions)
}
GetTransactions::GetTransactions(const GetTransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTransactions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hashes_){from._impl_.tx_hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetTransactions)
}

inline void GetTransactions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTransactions::~GetTransactions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetTransactions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTransactions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_hashes_.~RepeatedPtrField();
}

void GetTransactions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTransactions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetTransactions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTransactions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string tx_hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tx_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetTransactions.tx_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTransactions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetTransactions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tx_hashes = 1;
  for (int i = 0, n = this->_internal_tx_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_tx_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetTransactions.tx_hashes");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetTransactions)
  return target;
}

size_t GetTransactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetTransactions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tx_hashes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tx_hashes_.size());
  for (int i = 0, n = _impl_.tx_hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tx_hashes_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTransactions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTransactions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTransactions::GetClassData() const { return &_class_data_; }


void GetTransactions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTransactions*>(&to_msg);
  auto& from = static_cast<const GetTransactions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetTransactions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tx_hashes_.MergeFrom(from._impl_.tx_hashes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTransactions::CopyFrom(const GetTransactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactions::IsInitialized() const {
  return true;
}

void GetTransactions::InternalSwap(GetTransactions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tx_hashes_.InternalSwap(&other->_impl_.tx_hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[9]);
}

// ===================================================================

class GetAccountAssets::_Internal {
 public:
  static const ::iroha::protocol::AssetPaginationMeta& pagination_meta(const GetAccountAssets* msg);
};

const ::iroha::protocol::AssetPaginationMeta&
GetAccountAssets::_Internal::pagination_meta(const GetAccountAssets* msg) {
  return *msg->_impl_.pagination_meta_;
}
GetAccountAssets::GetAccountAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccountAssets)
}
GetAccountAssets::GetAccountAssets(const GetAccountAssets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountAssets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.pagination_meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination_meta()) {
    _this->_impl_.pagination_meta_ = new ::iroha::protocol::AssetPaginationMeta(*from._impl_.pagination_meta_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccountAssets)
}

inline void GetAccountAssets::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.pagination_meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAccountAssets::~GetAccountAssets() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccountAssets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountAssets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_meta_;
}

void GetAccountAssets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountAssets::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccountAssets)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_meta_ != nullptr) {
    delete _impl_.pagination_meta_;
  }
  _impl_.pagination_meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAssets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetAccountAssets.account_id"));
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.AssetPaginationMeta pagination_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountAssets::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccountAssets)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountAssets.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .iroha.protocol.AssetPaginationMeta pagination_meta = 2;
  if (this->_internal_has_pagination_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination_meta(this),
        _Internal::pagination_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccountAssets)
  return target;
}

size_t GetAccountAssets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccountAssets)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .iroha.protocol.AssetPaginationMeta pagination_meta = 2;
  if (this->_internal_has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountAssets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountAssets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountAssets::GetClassData() const { return &_class_data_; }


void GetAccountAssets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountAssets*>(&to_msg);
  auto& from = static_cast<const GetAccountAssets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccountAssets)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_has_pagination_meta()) {
    _this->_internal_mutable_pagination_meta()->::iroha::protocol::AssetPaginationMeta::MergeFrom(
        from._internal_pagination_meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountAssets::CopyFrom(const GetAccountAssets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccountAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAssets::IsInitialized() const {
  return true;
}

void GetAccountAssets::InternalSwap(GetAccountAssets* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  swap(_impl_.pagination_meta_, other->_impl_.pagination_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAssets::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[10]);
}

// ===================================================================

class AccountDetailPaginationMeta::_Internal {
 public:
  static const ::iroha::protocol::AccountDetailRecordId& first_record_id(const AccountDetailPaginationMeta* msg);
};

const ::iroha::protocol::AccountDetailRecordId&
AccountDetailPaginationMeta::_Internal::first_record_id(const AccountDetailPaginationMeta* msg) {
  return *msg->_impl_.first_record_id_;
}
void AccountDetailPaginationMeta::clear_first_record_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.first_record_id_ != nullptr) {
    delete _impl_.first_record_id_;
  }
  _impl_.first_record_id_ = nullptr;
}
AccountDetailPaginationMeta::AccountDetailPaginationMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AccountDetailPaginationMeta)
}
AccountDetailPaginationMeta::AccountDetailPaginationMeta(const AccountDetailPaginationMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountDetailPaginationMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.first_record_id_){nullptr}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_first_record_id()) {
    _this->_impl_.first_record_id_ = new ::iroha::protocol::AccountDetailRecordId(*from._impl_.first_record_id_);
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AccountDetailPaginationMeta)
}

inline void AccountDetailPaginationMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.first_record_id_){nullptr}
    , decltype(_impl_.page_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccountDetailPaginationMeta::~AccountDetailPaginationMeta() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AccountDetailPaginationMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountDetailPaginationMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.first_record_id_;
}

void AccountDetailPaginationMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountDetailPaginationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AccountDetailPaginationMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.first_record_id_ != nullptr) {
    delete _impl_.first_record_id_;
  }
  _impl_.first_record_id_ = nullptr;
  _impl_.page_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountDetailPaginationMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.AccountDetailRecordId first_record_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_record_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountDetailPaginationMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AccountDetailPaginationMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_size(), target);
  }

  // .iroha.protocol.AccountDetailRecordId first_record_id = 2;
  if (this->_internal_has_first_record_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::first_record_id(this),
        _Internal::first_record_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AccountDetailPaginationMeta)
  return target;
}

size_t AccountDetailPaginationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AccountDetailPaginationMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.AccountDetailRecordId first_record_id = 2;
  if (this->_internal_has_first_record_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.first_record_id_);
  }

  // uint32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountDetailPaginationMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountDetailPaginationMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountDetailPaginationMeta::GetClassData() const { return &_class_data_; }


void AccountDetailPaginationMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountDetailPaginationMeta*>(&to_msg);
  auto& from = static_cast<const AccountDetailPaginationMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AccountDetailPaginationMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_first_record_id()) {
    _this->_internal_mutable_first_record_id()->::iroha::protocol::AccountDetailRecordId::MergeFrom(
        from._internal_first_record_id());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountDetailPaginationMeta::CopyFrom(const AccountDetailPaginationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AccountDetailPaginationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDetailPaginationMeta::IsInitialized() const {
  return true;
}

void AccountDetailPaginationMeta::InternalSwap(AccountDetailPaginationMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountDetailPaginationMeta, _impl_.page_size_)
      + sizeof(AccountDetailPaginationMeta::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(AccountDetailPaginationMeta, _impl_.first_record_id_)>(
          reinterpret_cast<char*>(&_impl_.first_record_id_),
          reinterpret_cast<char*>(&other->_impl_.first_record_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountDetailPaginationMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[11]);
}

// ===================================================================

class GetAccountDetail::_Internal {
 public:
  static const ::iroha::protocol::AccountDetailPaginationMeta& pagination_meta(const GetAccountDetail* msg);
};

const ::iroha::protocol::AccountDetailPaginationMeta&
GetAccountDetail::_Internal::pagination_meta(const GetAccountDetail* msg) {
  return *msg->_impl_.pagination_meta_;
}
GetAccountDetail::GetAccountDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccountDetail)
}
GetAccountDetail::GetAccountDetail(const GetAccountDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pagination_meta_){nullptr}
    , decltype(_impl_.opt_account_id_){}
    , decltype(_impl_.opt_key_){}
    , decltype(_impl_.opt_writer_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination_meta()) {
    _this->_impl_.pagination_meta_ = new ::iroha::protocol::AccountDetailPaginationMeta(*from._impl_.pagination_meta_);
  }
  clear_has_opt_account_id();
  switch (from.opt_account_id_case()) {
    case kAccountId: {
      _this->_internal_set_account_id(from._internal_account_id());
      break;
    }
    case OPT_ACCOUNT_ID_NOT_SET: {
      break;
    }
  }
  clear_has_opt_key();
  switch (from.opt_key_case()) {
    case kKey: {
      _this->_internal_set_key(from._internal_key());
      break;
    }
    case OPT_KEY_NOT_SET: {
      break;
    }
  }
  clear_has_opt_writer();
  switch (from.opt_writer_case()) {
    case kWriter: {
      _this->_internal_set_writer(from._internal_writer());
      break;
    }
    case OPT_WRITER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccountDetail)
}

inline void GetAccountDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pagination_meta_){nullptr}
    , decltype(_impl_.opt_account_id_){}
    , decltype(_impl_.opt_key_){}
    , decltype(_impl_.opt_writer_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_opt_account_id();
  clear_has_opt_key();
  clear_has_opt_writer();
}

GetAccountDetail::~GetAccountDetail() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccountDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_meta_;
  if (has_opt_account_id()) {
    clear_opt_account_id();
  }
  if (has_opt_key()) {
    clear_opt_key();
  }
  if (has_opt_writer()) {
    clear_opt_writer();
  }
}

void GetAccountDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountDetail::clear_opt_account_id() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.GetAccountDetail)
  switch (opt_account_id_case()) {
    case kAccountId: {
      _impl_.opt_account_id_.account_id_.Destroy();
      break;
    }
    case OPT_ACCOUNT_ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPT_ACCOUNT_ID_NOT_SET;
}

void GetAccountDetail::clear_opt_key() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.GetAccountDetail)
  switch (opt_key_case()) {
    case kKey: {
      _impl_.opt_key_.key_.Destroy();
      break;
    }
    case OPT_KEY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPT_KEY_NOT_SET;
}

void GetAccountDetail::clear_opt_writer() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.GetAccountDetail)
  switch (opt_writer_case()) {
    case kWriter: {
      _impl_.opt_writer_.writer_.Destroy();
      break;
    }
    case OPT_WRITER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPT_WRITER_NOT_SET;
}


void GetAccountDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccountDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pagination_meta_ != nullptr) {
    delete _impl_.pagination_meta_;
  }
  _impl_.pagination_meta_ = nullptr;
  clear_opt_account_id();
  clear_opt_key();
  clear_opt_writer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetAccountDetail.account_id"));
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetAccountDetail.key"));
        } else
          goto handle_unusual;
        continue;
      // string writer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_writer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetAccountDetail.writer"));
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.AccountDetailPaginationMeta pagination_meta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccountDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (_internal_has_account_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountDetail.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string key = 2;
  if (_internal_has_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountDetail.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string writer = 3;
  if (_internal_has_writer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_writer().data(), static_cast<int>(this->_internal_writer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountDetail.writer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_writer(), target);
  }

  // .iroha.protocol.AccountDetailPaginationMeta pagination_meta = 4;
  if (this->_internal_has_pagination_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pagination_meta(this),
        _Internal::pagination_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccountDetail)
  return target;
}

size_t GetAccountDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccountDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.AccountDetailPaginationMeta pagination_meta = 4;
  if (this->_internal_has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_meta_);
  }

  switch (opt_account_id_case()) {
    // string account_id = 1;
    case kAccountId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_id());
      break;
    }
    case OPT_ACCOUNT_ID_NOT_SET: {
      break;
    }
  }
  switch (opt_key_case()) {
    // string key = 2;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
      break;
    }
    case OPT_KEY_NOT_SET: {
      break;
    }
  }
  switch (opt_writer_case()) {
    // string writer = 3;
    case kWriter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_writer());
      break;
    }
    case OPT_WRITER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountDetail::GetClassData() const { return &_class_data_; }


void GetAccountDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountDetail*>(&to_msg);
  auto& from = static_cast<const GetAccountDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccountDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pagination_meta()) {
    _this->_internal_mutable_pagination_meta()->::iroha::protocol::AccountDetailPaginationMeta::MergeFrom(
        from._internal_pagination_meta());
  }
  switch (from.opt_account_id_case()) {
    case kAccountId: {
      _this->_internal_set_account_id(from._internal_account_id());
      break;
    }
    case OPT_ACCOUNT_ID_NOT_SET: {
      break;
    }
  }
  switch (from.opt_key_case()) {
    case kKey: {
      _this->_internal_set_key(from._internal_key());
      break;
    }
    case OPT_KEY_NOT_SET: {
      break;
    }
  }
  switch (from.opt_writer_case()) {
    case kWriter: {
      _this->_internal_set_writer(from._internal_writer());
      break;
    }
    case OPT_WRITER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountDetail::CopyFrom(const GetAccountDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccountDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountDetail::IsInitialized() const {
  return true;
}

void GetAccountDetail::InternalSwap(GetAccountDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pagination_meta_, other->_impl_.pagination_meta_);
  swap(_impl_.opt_account_id_, other->_impl_.opt_account_id_);
  swap(_impl_.opt_key_, other->_impl_.opt_key_);
  swap(_impl_.opt_writer_, other->_impl_.opt_writer_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[12]);
}

// ===================================================================

class GetAssetInfo::_Internal {
 public:
};

GetAssetInfo::GetAssetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAssetInfo)
}
GetAssetInfo::GetAssetInfo(const GetAssetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.asset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_id().empty()) {
    _this->_impl_.asset_id_.Set(from._internal_asset_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAssetInfo)
}

inline void GetAssetInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.asset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAssetInfo::~GetAssetInfo() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAssetInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asset_id_.Destroy();
}

void GetAssetInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAssetInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetAssetInfo.asset_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAssetInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAssetInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (!this->_internal_asset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAssetInfo.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAssetInfo)
  return target;
}

size_t GetAssetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAssetInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (!this->_internal_asset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetInfo::GetClassData() const { return &_class_data_; }


void GetAssetInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetInfo*>(&to_msg);
  auto& from = static_cast<const GetAssetInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAssetInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_id().empty()) {
    _this->_internal_set_asset_id(from._internal_asset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetInfo::CopyFrom(const GetAssetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAssetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetInfo::IsInitialized() const {
  return true;
}

void GetAssetInfo::InternalSwap(GetAssetInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_id_, lhs_arena,
      &other->_impl_.asset_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[13]);
}

// ===================================================================

class GetRoles::_Internal {
 public:
};

GetRoles::GetRoles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetRoles)
}
GetRoles::GetRoles(const GetRoles& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetRoles* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetRoles)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRoles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRoles::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetRoles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[14]);
}

// ===================================================================

class GetRolePermissions::_Internal {
 public:
};

GetRolePermissions::GetRolePermissions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetRolePermissions)
}
GetRolePermissions::GetRolePermissions(const GetRolePermissions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRolePermissions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_id().empty()) {
    _this->_impl_.role_id_.Set(from._internal_role_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetRolePermissions)
}

inline void GetRolePermissions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRolePermissions::~GetRolePermissions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetRolePermissions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRolePermissions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_id_.Destroy();
}

void GetRolePermissions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRolePermissions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetRolePermissions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRolePermissions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_role_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetRolePermissions.role_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRolePermissions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetRolePermissions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string role_id = 1;
  if (!this->_internal_role_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_id().data(), static_cast<int>(this->_internal_role_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetRolePermissions.role_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetRolePermissions)
  return target;
}

size_t GetRolePermissions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetRolePermissions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_id = 1;
  if (!this->_internal_role_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRolePermissions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRolePermissions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRolePermissions::GetClassData() const { return &_class_data_; }


void GetRolePermissions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRolePermissions*>(&to_msg);
  auto& from = static_cast<const GetRolePermissions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetRolePermissions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role_id().empty()) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRolePermissions::CopyFrom(const GetRolePermissions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetRolePermissions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRolePermissions::IsInitialized() const {
  return true;
}

void GetRolePermissions::InternalSwap(GetRolePermissions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_id_, lhs_arena,
      &other->_impl_.role_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRolePermissions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[15]);
}

// ===================================================================

class GetPendingTransactions::_Internal {
 public:
  static const ::iroha::protocol::TxPaginationMeta& pagination_meta(const GetPendingTransactions* msg);
};

const ::iroha::protocol::TxPaginationMeta&
GetPendingTransactions::_Internal::pagination_meta(const GetPendingTransactions* msg) {
  return *msg->_impl_.pagination_meta_;
}
GetPendingTransactions::GetPendingTransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetPendingTransactions)
}
GetPendingTransactions::GetPendingTransactions(const GetPendingTransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPendingTransactions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pagination_meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination_meta()) {
    _this->_impl_.pagination_meta_ = new ::iroha::protocol::TxPaginationMeta(*from._impl_.pagination_meta_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetPendingTransactions)
}

inline void GetPendingTransactions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pagination_meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPendingTransactions::~GetPendingTransactions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetPendingTransactions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPendingTransactions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_meta_;
}

void GetPendingTransactions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPendingTransactions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetPendingTransactions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pagination_meta_ != nullptr) {
    delete _impl_.pagination_meta_;
  }
  _impl_.pagination_meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPendingTransactions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.protocol.TxPaginationMeta pagination_meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPendingTransactions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetPendingTransactions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.TxPaginationMeta pagination_meta = 1;
  if (this->_internal_has_pagination_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination_meta(this),
        _Internal::pagination_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetPendingTransactions)
  return target;
}

size_t GetPendingTransactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetPendingTransactions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.TxPaginationMeta pagination_meta = 1;
  if (this->_internal_has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPendingTransactions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPendingTransactions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPendingTransactions::GetClassData() const { return &_class_data_; }


void GetPendingTransactions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPendingTransactions*>(&to_msg);
  auto& from = static_cast<const GetPendingTransactions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetPendingTransactions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pagination_meta()) {
    _this->_internal_mutable_pagination_meta()->::iroha::protocol::TxPaginationMeta::MergeFrom(
        from._internal_pagination_meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPendingTransactions::CopyFrom(const GetPendingTransactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetPendingTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPendingTransactions::IsInitialized() const {
  return true;
}

void GetPendingTransactions::InternalSwap(GetPendingTransactions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pagination_meta_, other->_impl_.pagination_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPendingTransactions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[16]);
}

// ===================================================================

class GetPeers::_Internal {
 public:
};

GetPeers::GetPeers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetPeers)
}
GetPeers::GetPeers(const GetPeers& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetPeers* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetPeers)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPeers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPeers::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetPeers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[17]);
}

// ===================================================================

class QueryPayloadMeta::_Internal {
 public:
};

QueryPayloadMeta::QueryPayloadMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.QueryPayloadMeta)
}
QueryPayloadMeta::QueryPayloadMeta(const QueryPayloadMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPayloadMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.creator_account_id_){}
    , decltype(_impl_.created_time_){}
    , decltype(_impl_.query_counter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.creator_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_account_id().empty()) {
    _this->_impl_.creator_account_id_.Set(from._internal_creator_account_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_time_, &from._impl_.created_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.query_counter_) -
    reinterpret_cast<char*>(&_impl_.created_time_)) + sizeof(_impl_.query_counter_));
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.QueryPayloadMeta)
}

inline void QueryPayloadMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.creator_account_id_){}
    , decltype(_impl_.created_time_){uint64_t{0u}}
    , decltype(_impl_.query_counter_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.creator_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPayloadMeta::~QueryPayloadMeta() {
  // @@protoc_insertion_point(destructor:iroha.protocol.QueryPayloadMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPayloadMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.creator_account_id_.Destroy();
}

void QueryPayloadMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPayloadMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.QueryPayloadMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.creator_account_id_.ClearToEmpty();
  ::memset(&_impl_.created_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.query_counter_) -
      reinterpret_cast<char*>(&_impl_.created_time_)) + sizeof(_impl_.query_counter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPayloadMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 created_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.created_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_creator_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.QueryPayloadMeta.creator_account_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 query_counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.query_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryPayloadMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.QueryPayloadMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 created_time = 1;
  if (this->_internal_created_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_created_time(), target);
  }

  // string creator_account_id = 2;
  if (!this->_internal_creator_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_account_id().data(), static_cast<int>(this->_internal_creator_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.QueryPayloadMeta.creator_account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_creator_account_id(), target);
  }

  // uint64 query_counter = 3;
  if (this->_internal_query_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_query_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.QueryPayloadMeta)
  return target;
}

size_t QueryPayloadMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.QueryPayloadMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string creator_account_id = 2;
  if (!this->_internal_creator_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_account_id());
  }

  // uint64 created_time = 1;
  if (this->_internal_created_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_time());
  }

  // uint64 query_counter = 3;
  if (this->_internal_query_counter() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_query_counter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPayloadMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPayloadMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPayloadMeta::GetClassData() const { return &_class_data_; }


void QueryPayloadMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPayloadMeta*>(&to_msg);
  auto& from = static_cast<const QueryPayloadMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.QueryPayloadMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_creator_account_id().empty()) {
    _this->_internal_set_creator_account_id(from._internal_creator_account_id());
  }
  if (from._internal_created_time() != 0) {
    _this->_internal_set_created_time(from._internal_created_time());
  }
  if (from._internal_query_counter() != 0) {
    _this->_internal_set_query_counter(from._internal_query_counter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPayloadMeta::CopyFrom(const QueryPayloadMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.QueryPayloadMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPayloadMeta::IsInitialized() const {
  return true;
}

void QueryPayloadMeta::InternalSwap(QueryPayloadMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_account_id_, lhs_arena,
      &other->_impl_.creator_account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryPayloadMeta, _impl_.query_counter_)
      + sizeof(QueryPayloadMeta::_impl_.query_counter_)
      - PROTOBUF_FIELD_OFFSET(QueryPayloadMeta, _impl_.created_time_)>(
          reinterpret_cast<char*>(&_impl_.created_time_),
          reinterpret_cast<char*>(&other->_impl_.created_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPayloadMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[18]);
}

// ===================================================================

class GetEngineReceipts::_Internal {
 public:
};

GetEngineReceipts::GetEngineReceipts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetEngineReceipts)
}
GetEngineReceipts::GetEngineReceipts(const GetEngineReceipts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEngineReceipts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetEngineReceipts)
}

inline void GetEngineReceipts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetEngineReceipts::~GetEngineReceipts() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetEngineReceipts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEngineReceipts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_hash_.Destroy();
}

void GetEngineReceipts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEngineReceipts::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetEngineReceipts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEngineReceipts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "iroha.protocol.GetEngineReceipts.tx_hash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetEngineReceipts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetEngineReceipts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_hash().data(), static_cast<int>(this->_internal_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetEngineReceipts.tx_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetEngineReceipts)
  return target;
}

size_t GetEngineReceipts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetEngineReceipts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEngineReceipts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEngineReceipts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEngineReceipts::GetClassData() const { return &_class_data_; }


void GetEngineReceipts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEngineReceipts*>(&to_msg);
  auto& from = static_cast<const GetEngineReceipts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetEngineReceipts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEngineReceipts::CopyFrom(const GetEngineReceipts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetEngineReceipts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEngineReceipts::IsInitialized() const {
  return true;
}

void GetEngineReceipts::InternalSwap(GetEngineReceipts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_, lhs_arena,
      &other->_impl_.tx_hash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEngineReceipts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[19]);
}

// ===================================================================

class Query_Payload::_Internal {
 public:
  static const ::iroha::protocol::QueryPayloadMeta& meta(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccount& get_account(const Query_Payload* msg);
  static const ::iroha::protocol::GetSignatories& get_signatories(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccountTransactions& get_account_transactions(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccountAssetTransactions& get_account_asset_transactions(const Query_Payload* msg);
  static const ::iroha::protocol::GetTransactions& get_transactions(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccountAssets& get_account_assets(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccountDetail& get_account_detail(const Query_Payload* msg);
  static const ::iroha::protocol::GetRoles& get_roles(const Query_Payload* msg);
  static const ::iroha::protocol::GetRolePermissions& get_role_permissions(const Query_Payload* msg);
  static const ::iroha::protocol::GetAssetInfo& get_asset_info(const Query_Payload* msg);
  static const ::iroha::protocol::GetPendingTransactions& get_pending_transactions(const Query_Payload* msg);
  static const ::iroha::protocol::GetBlock& get_block(const Query_Payload* msg);
  static const ::iroha::protocol::GetPeers& get_peers(const Query_Payload* msg);
  static const ::iroha::protocol::GetEngineReceipts& get_engine_receipts(const Query_Payload* msg);
};

const ::iroha::protocol::QueryPayloadMeta&
Query_Payload::_Internal::meta(const Query_Payload* msg) {
  return *msg->_impl_.meta_;
}
const ::iroha::protocol::GetAccount&
Query_Payload::_Internal::get_account(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_account_;
}
const ::iroha::protocol::GetSignatories&
Query_Payload::_Internal::get_signatories(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_signatories_;
}
const ::iroha::protocol::GetAccountTransactions&
Query_Payload::_Internal::get_account_transactions(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_account_transactions_;
}
const ::iroha::protocol::GetAccountAssetTransactions&
Query_Payload::_Internal::get_account_asset_transactions(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_account_asset_transactions_;
}
const ::iroha::protocol::GetTransactions&
Query_Payload::_Internal::get_transactions(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_transactions_;
}
const ::iroha::protocol::GetAccountAssets&
Query_Payload::_Internal::get_account_assets(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_account_assets_;
}
const ::iroha::protocol::GetAccountDetail&
Query_Payload::_Internal::get_account_detail(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_account_detail_;
}
const ::iroha::protocol::GetRoles&
Query_Payload::_Internal::get_roles(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_roles_;
}
const ::iroha::protocol::GetRolePermissions&
Query_Payload::_Internal::get_role_permissions(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_role_permissions_;
}
const ::iroha::protocol::GetAssetInfo&
Query_Payload::_Internal::get_asset_info(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_asset_info_;
}
const ::iroha::protocol::GetPendingTransactions&
Query_Payload::_Internal::get_pending_transactions(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_pending_transactions_;
}
const ::iroha::protocol::GetBlock&
Query_Payload::_Internal::get_block(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_block_;
}
const ::iroha::protocol::GetPeers&
Query_Payload::_Internal::get_peers(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_peers_;
}
const ::iroha::protocol::GetEngineReceipts&
Query_Payload::_Internal::get_engine_receipts(const Query_Payload* msg) {
  return *msg->_impl_.query_.get_engine_receipts_;
}
void Query_Payload::set_allocated_get_account(::iroha::protocol::GetAccount* get_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_account);
    if (message_arena != submessage_arena) {
      get_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account, submessage_arena);
    }
    set_has_get_account();
    _impl_.query_.get_account_ = get_account;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account)
}
void Query_Payload::set_allocated_get_signatories(::iroha::protocol::GetSignatories* get_signatories) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_signatories) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_signatories);
    if (message_arena != submessage_arena) {
      get_signatories = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_signatories, submessage_arena);
    }
    set_has_get_signatories();
    _impl_.query_.get_signatories_ = get_signatories;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_signatories)
}
void Query_Payload::set_allocated_get_account_transactions(::iroha::protocol::GetAccountTransactions* get_account_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_account_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_account_transactions);
    if (message_arena != submessage_arena) {
      get_account_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_transactions, submessage_arena);
    }
    set_has_get_account_transactions();
    _impl_.query_.get_account_transactions_ = get_account_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account_transactions)
}
void Query_Payload::set_allocated_get_account_asset_transactions(::iroha::protocol::GetAccountAssetTransactions* get_account_asset_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_account_asset_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_account_asset_transactions);
    if (message_arena != submessage_arena) {
      get_account_asset_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_asset_transactions, submessage_arena);
    }
    set_has_get_account_asset_transactions();
    _impl_.query_.get_account_asset_transactions_ = get_account_asset_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account_asset_transactions)
}
void Query_Payload::set_allocated_get_transactions(::iroha::protocol::GetTransactions* get_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_transactions);
    if (message_arena != submessage_arena) {
      get_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_transactions, submessage_arena);
    }
    set_has_get_transactions();
    _impl_.query_.get_transactions_ = get_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_transactions)
}
void Query_Payload::set_allocated_get_account_assets(::iroha::protocol::GetAccountAssets* get_account_assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_account_assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_account_assets);
    if (message_arena != submessage_arena) {
      get_account_assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_assets, submessage_arena);
    }
    set_has_get_account_assets();
    _impl_.query_.get_account_assets_ = get_account_assets;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account_assets)
}
void Query_Payload::set_allocated_get_account_detail(::iroha::protocol::GetAccountDetail* get_account_detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_account_detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_account_detail);
    if (message_arena != submessage_arena) {
      get_account_detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_detail, submessage_arena);
    }
    set_has_get_account_detail();
    _impl_.query_.get_account_detail_ = get_account_detail;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account_detail)
}
void Query_Payload::set_allocated_get_roles(::iroha::protocol::GetRoles* get_roles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_roles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_roles);
    if (message_arena != submessage_arena) {
      get_roles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_roles, submessage_arena);
    }
    set_has_get_roles();
    _impl_.query_.get_roles_ = get_roles;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_roles)
}
void Query_Payload::set_allocated_get_role_permissions(::iroha::protocol::GetRolePermissions* get_role_permissions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_role_permissions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_role_permissions);
    if (message_arena != submessage_arena) {
      get_role_permissions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_role_permissions, submessage_arena);
    }
    set_has_get_role_permissions();
    _impl_.query_.get_role_permissions_ = get_role_permissions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_role_permissions)
}
void Query_Payload::set_allocated_get_asset_info(::iroha::protocol::GetAssetInfo* get_asset_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_asset_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_asset_info);
    if (message_arena != submessage_arena) {
      get_asset_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_asset_info, submessage_arena);
    }
    set_has_get_asset_info();
    _impl_.query_.get_asset_info_ = get_asset_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_asset_info)
}
void Query_Payload::set_allocated_get_pending_transactions(::iroha::protocol::GetPendingTransactions* get_pending_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_pending_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_pending_transactions);
    if (message_arena != submessage_arena) {
      get_pending_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_pending_transactions, submessage_arena);
    }
    set_has_get_pending_transactions();
    _impl_.query_.get_pending_transactions_ = get_pending_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_pending_transactions)
}
void Query_Payload::set_allocated_get_block(::iroha::protocol::GetBlock* get_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_block);
    if (message_arena != submessage_arena) {
      get_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_block, submessage_arena);
    }
    set_has_get_block();
    _impl_.query_.get_block_ = get_block;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_block)
}
void Query_Payload::set_allocated_get_peers(::iroha::protocol::GetPeers* get_peers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_peers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_peers);
    if (message_arena != submessage_arena) {
      get_peers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_peers, submessage_arena);
    }
    set_has_get_peers();
    _impl_.query_.get_peers_ = get_peers;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_peers)
}
void Query_Payload::set_allocated_get_engine_receipts(::iroha::protocol::GetEngineReceipts* get_engine_receipts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (get_engine_receipts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_engine_receipts);
    if (message_arena != submessage_arena) {
      get_engine_receipts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_engine_receipts, submessage_arena);
    }
    set_has_get_engine_receipts();
    _impl_.query_.get_engine_receipts_ = get_engine_receipts;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_engine_receipts)
}
Query_Payload::Query_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Query.Payload)
}
Query_Payload::Query_Payload(const Query_Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_Payload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.query_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    _this->_impl_.meta_ = new ::iroha::protocol::QueryPayloadMeta(*from._impl_.meta_);
  }
  clear_has_query();
  switch (from.query_case()) {
    case kGetAccount: {
      _this->_internal_mutable_get_account()->::iroha::protocol::GetAccount::MergeFrom(
          from._internal_get_account());
      break;
    }
    case kGetSignatories: {
      _this->_internal_mutable_get_signatories()->::iroha::protocol::GetSignatories::MergeFrom(
          from._internal_get_signatories());
      break;
    }
    case kGetAccountTransactions: {
      _this->_internal_mutable_get_account_transactions()->::iroha::protocol::GetAccountTransactions::MergeFrom(
          from._internal_get_account_transactions());
      break;
    }
    case kGetAccountAssetTransactions: {
      _this->_internal_mutable_get_account_asset_transactions()->::iroha::protocol::GetAccountAssetTransactions::MergeFrom(
          from._internal_get_account_asset_transactions());
      break;
    }
    case kGetTransactions: {
      _this->_internal_mutable_get_transactions()->::iroha::protocol::GetTransactions::MergeFrom(
          from._internal_get_transactions());
      break;
    }
    case kGetAccountAssets: {
      _this->_internal_mutable_get_account_assets()->::iroha::protocol::GetAccountAssets::MergeFrom(
          from._internal_get_account_assets());
      break;
    }
    case kGetAccountDetail: {
      _this->_internal_mutable_get_account_detail()->::iroha::protocol::GetAccountDetail::MergeFrom(
          from._internal_get_account_detail());
      break;
    }
    case kGetRoles: {
      _this->_internal_mutable_get_roles()->::iroha::protocol::GetRoles::MergeFrom(
          from._internal_get_roles());
      break;
    }
    case kGetRolePermissions: {
      _this->_internal_mutable_get_role_permissions()->::iroha::protocol::GetRolePermissions::MergeFrom(
          from._internal_get_role_permissions());
      break;
    }
    case kGetAssetInfo: {
      _this->_internal_mutable_get_asset_info()->::iroha::protocol::GetAssetInfo::MergeFrom(
          from._internal_get_asset_info());
      break;
    }
    case kGetPendingTransactions: {
      _this->_internal_mutable_get_pending_transactions()->::iroha::protocol::GetPendingTransactions::MergeFrom(
          from._internal_get_pending_transactions());
      break;
    }
    case kGetBlock: {
      _this->_internal_mutable_get_block()->::iroha::protocol::GetBlock::MergeFrom(
          from._internal_get_block());
      break;
    }
    case kGetPeers: {
      _this->_internal_mutable_get_peers()->::iroha::protocol::GetPeers::MergeFrom(
          from._internal_get_peers());
      break;
    }
    case kGetEngineReceipts: {
      _this->_internal_mutable_get_engine_receipts()->::iroha::protocol::GetEngineReceipts::MergeFrom(
          from._internal_get_engine_receipts());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Query.Payload)
}

inline void Query_Payload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.query_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_query();
}

Query_Payload::~Query_Payload() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Query.Payload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.meta_;
  if (has_query()) {
    clear_query();
  }
}

void Query_Payload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_Payload::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.Query.Payload)
  switch (query_case()) {
    case kGetAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_account_;
      }
      break;
    }
    case kGetSignatories: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_signatories_;
      }
      break;
    }
    case kGetAccountTransactions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_account_transactions_;
      }
      break;
    }
    case kGetAccountAssetTransactions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_account_asset_transactions_;
      }
      break;
    }
    case kGetTransactions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_transactions_;
      }
      break;
    }
    case kGetAccountAssets: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_account_assets_;
      }
      break;
    }
    case kGetAccountDetail: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_account_detail_;
      }
      break;
    }
    case kGetRoles: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_roles_;
      }
      break;
    }
    case kGetRolePermissions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_role_permissions_;
      }
      break;
    }
    case kGetAssetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_asset_info_;
      }
      break;
    }
    case kGetPendingTransactions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_pending_transactions_;
      }
      break;
    }
    case kGetBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_block_;
      }
      break;
    }
    case kGetPeers: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_peers_;
      }
      break;
    }
    case kGetEngineReceipts: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.get_engine_receipts_;
      }
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = QUERY_NOT_SET;
}


void Query_Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Query.Payload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
  clear_query();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_Payload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.protocol.QueryPayloadMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccount get_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetSignatories get_signatories = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_signatories(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccountTransactions get_account_transactions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_transactions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccountAssetTransactions get_account_asset_transactions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_asset_transactions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetTransactions get_transactions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_transactions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccountAssets get_account_assets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_assets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccountDetail get_account_detail = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetRoles get_roles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_roles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetRolePermissions get_role_permissions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_role_permissions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetAssetInfo get_asset_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_asset_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetPendingTransactions get_pending_transactions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_pending_transactions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetBlock get_block = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetPeers get_peers = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_peers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.GetEngineReceipts get_engine_receipts = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_engine_receipts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Query_Payload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Query.Payload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.QueryPayloadMeta meta = 1;
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetAccount get_account = 3;
  if (_internal_has_get_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::get_account(this),
        _Internal::get_account(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetSignatories get_signatories = 4;
  if (_internal_has_get_signatories()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::get_signatories(this),
        _Internal::get_signatories(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetAccountTransactions get_account_transactions = 5;
  if (_internal_has_get_account_transactions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::get_account_transactions(this),
        _Internal::get_account_transactions(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetAccountAssetTransactions get_account_asset_transactions = 6;
  if (_internal_has_get_account_asset_transactions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::get_account_asset_transactions(this),
        _Internal::get_account_asset_transactions(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetTransactions get_transactions = 7;
  if (_internal_has_get_transactions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::get_transactions(this),
        _Internal::get_transactions(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetAccountAssets get_account_assets = 8;
  if (_internal_has_get_account_assets()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::get_account_assets(this),
        _Internal::get_account_assets(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetAccountDetail get_account_detail = 9;
  if (_internal_has_get_account_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::get_account_detail(this),
        _Internal::get_account_detail(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetRoles get_roles = 10;
  if (_internal_has_get_roles()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::get_roles(this),
        _Internal::get_roles(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetRolePermissions get_role_permissions = 11;
  if (_internal_has_get_role_permissions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::get_role_permissions(this),
        _Internal::get_role_permissions(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetAssetInfo get_asset_info = 12;
  if (_internal_has_get_asset_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::get_asset_info(this),
        _Internal::get_asset_info(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetPendingTransactions get_pending_transactions = 13;
  if (_internal_has_get_pending_transactions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::get_pending_transactions(this),
        _Internal::get_pending_transactions(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetBlock get_block = 14;
  if (_internal_has_get_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::get_block(this),
        _Internal::get_block(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetPeers get_peers = 15;
  if (_internal_has_get_peers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::get_peers(this),
        _Internal::get_peers(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.GetEngineReceipts get_engine_receipts = 16;
  if (_internal_has_get_engine_receipts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::get_engine_receipts(this),
        _Internal::get_engine_receipts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Query.Payload)
  return target;
}

size_t Query_Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Query.Payload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.QueryPayloadMeta meta = 1;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  switch (query_case()) {
    // .iroha.protocol.GetAccount get_account = 3;
    case kGetAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_account_);
      break;
    }
    // .iroha.protocol.GetSignatories get_signatories = 4;
    case kGetSignatories: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_signatories_);
      break;
    }
    // .iroha.protocol.GetAccountTransactions get_account_transactions = 5;
    case kGetAccountTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_account_transactions_);
      break;
    }
    // .iroha.protocol.GetAccountAssetTransactions get_account_asset_transactions = 6;
    case kGetAccountAssetTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_account_asset_transactions_);
      break;
    }
    // .iroha.protocol.GetTransactions get_transactions = 7;
    case kGetTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_transactions_);
      break;
    }
    // .iroha.protocol.GetAccountAssets get_account_assets = 8;
    case kGetAccountAssets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_account_assets_);
      break;
    }
    // .iroha.protocol.GetAccountDetail get_account_detail = 9;
    case kGetAccountDetail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_account_detail_);
      break;
    }
    // .iroha.protocol.GetRoles get_roles = 10;
    case kGetRoles: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_roles_);
      break;
    }
    // .iroha.protocol.GetRolePermissions get_role_permissions = 11;
    case kGetRolePermissions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_role_permissions_);
      break;
    }
    // .iroha.protocol.GetAssetInfo get_asset_info = 12;
    case kGetAssetInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_asset_info_);
      break;
    }
    // .iroha.protocol.GetPendingTransactions get_pending_transactions = 13;
    case kGetPendingTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_pending_transactions_);
      break;
    }
    // .iroha.protocol.GetBlock get_block = 14;
    case kGetBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_block_);
      break;
    }
    // .iroha.protocol.GetPeers get_peers = 15;
    case kGetPeers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_peers_);
      break;
    }
    // .iroha.protocol.GetEngineReceipts get_engine_receipts = 16;
    case kGetEngineReceipts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.get_engine_receipts_);
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_Payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_Payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_Payload::GetClassData() const { return &_class_data_; }


void Query_Payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_Payload*>(&to_msg);
  auto& from = static_cast<const Query_Payload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Query.Payload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meta()) {
    _this->_internal_mutable_meta()->::iroha::protocol::QueryPayloadMeta::MergeFrom(
        from._internal_meta());
  }
  switch (from.query_case()) {
    case kGetAccount: {
      _this->_internal_mutable_get_account()->::iroha::protocol::GetAccount::MergeFrom(
          from._internal_get_account());
      break;
    }
    case kGetSignatories: {
      _this->_internal_mutable_get_signatories()->::iroha::protocol::GetSignatories::MergeFrom(
          from._internal_get_signatories());
      break;
    }
    case kGetAccountTransactions: {
      _this->_internal_mutable_get_account_transactions()->::iroha::protocol::GetAccountTransactions::MergeFrom(
          from._internal_get_account_transactions());
      break;
    }
    case kGetAccountAssetTransactions: {
      _this->_internal_mutable_get_account_asset_transactions()->::iroha::protocol::GetAccountAssetTransactions::MergeFrom(
          from._internal_get_account_asset_transactions());
      break;
    }
    case kGetTransactions: {
      _this->_internal_mutable_get_transactions()->::iroha::protocol::GetTransactions::MergeFrom(
          from._internal_get_transactions());
      break;
    }
    case kGetAccountAssets: {
      _this->_internal_mutable_get_account_assets()->::iroha::protocol::GetAccountAssets::MergeFrom(
          from._internal_get_account_assets());
      break;
    }
    case kGetAccountDetail: {
      _this->_internal_mutable_get_account_detail()->::iroha::protocol::GetAccountDetail::MergeFrom(
          from._internal_get_account_detail());
      break;
    }
    case kGetRoles: {
      _this->_internal_mutable_get_roles()->::iroha::protocol::GetRoles::MergeFrom(
          from._internal_get_roles());
      break;
    }
    case kGetRolePermissions: {
      _this->_internal_mutable_get_role_permissions()->::iroha::protocol::GetRolePermissions::MergeFrom(
          from._internal_get_role_permissions());
      break;
    }
    case kGetAssetInfo: {
      _this->_internal_mutable_get_asset_info()->::iroha::protocol::GetAssetInfo::MergeFrom(
          from._internal_get_asset_info());
      break;
    }
    case kGetPendingTransactions: {
      _this->_internal_mutable_get_pending_transactions()->::iroha::protocol::GetPendingTransactions::MergeFrom(
          from._internal_get_pending_transactions());
      break;
    }
    case kGetBlock: {
      _this->_internal_mutable_get_block()->::iroha::protocol::GetBlock::MergeFrom(
          from._internal_get_block());
      break;
    }
    case kGetPeers: {
      _this->_internal_mutable_get_peers()->::iroha::protocol::GetPeers::MergeFrom(
          from._internal_get_peers());
      break;
    }
    case kGetEngineReceipts: {
      _this->_internal_mutable_get_engine_receipts()->::iroha::protocol::GetEngineReceipts::MergeFrom(
          from._internal_get_engine_receipts());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_Payload::CopyFrom(const Query_Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Query.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_Payload::IsInitialized() const {
  return true;
}

void Query_Payload::InternalSwap(Query_Payload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.meta_, other->_impl_.meta_);
  swap(_impl_.query_, other->_impl_.query_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_Payload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[20]);
}

// ===================================================================

class Query::_Internal {
 public:
  static const ::iroha::protocol::Query_Payload& payload(const Query* msg);
  static const ::iroha::protocol::Signature& signature(const Query* msg);
};

const ::iroha::protocol::Query_Payload&
Query::_Internal::payload(const Query* msg) {
  return *msg->_impl_.payload_;
}
const ::iroha::protocol::Signature&
Query::_Internal::signature(const Query* msg) {
  return *msg->_impl_.signature_;
}
void Query::clear_signature() {
  if (GetArenaForAllocation() == nullptr && _impl_.signature_ != nullptr) {
    delete _impl_.signature_;
  }
  _impl_.signature_ = nullptr;
}
Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::iroha::protocol::Query_Payload(*from._impl_.payload_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::iroha::protocol::Signature(*from._impl_.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Query)
}

inline void Query::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Query)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.payload_;
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void Query::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Query)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.signature_ != nullptr) {
    delete _impl_.signature_;
  }
  _impl_.signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.protocol.Query.Payload payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Query::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Query)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Query.Payload payload = 1;
  if (this->_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.Signature signature = 2;
  if (this->_internal_has_signature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Query)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Query.Payload payload = 1;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payload_);
  }

  // .iroha.protocol.Signature signature = 2;
  if (this->_internal_has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query::GetClassData() const { return &_class_data_; }


void Query::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query*>(&to_msg);
  auto& from = static_cast<const Query&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Query)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payload()) {
    _this->_internal_mutable_payload()->::iroha::protocol::Query_Payload::MergeFrom(
        from._internal_payload());
  }
  if (from._internal_has_signature()) {
    _this->_internal_mutable_signature()->::iroha::protocol::Signature::MergeFrom(
        from._internal_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query, _impl_.signature_)
      + sizeof(Query::_impl_.signature_)
      - PROTOBUF_FIELD_OFFSET(Query, _impl_.payload_)>(
          reinterpret_cast<char*>(&_impl_.payload_),
          reinterpret_cast<char*>(&other->_impl_.payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[21]);
}

// ===================================================================

class BlocksQuery::_Internal {
 public:
  static const ::iroha::protocol::QueryPayloadMeta& meta(const BlocksQuery* msg);
  static const ::iroha::protocol::Signature& signature(const BlocksQuery* msg);
};

const ::iroha::protocol::QueryPayloadMeta&
BlocksQuery::_Internal::meta(const BlocksQuery* msg) {
  return *msg->_impl_.meta_;
}
const ::iroha::protocol::Signature&
BlocksQuery::_Internal::signature(const BlocksQuery* msg) {
  return *msg->_impl_.signature_;
}
void BlocksQuery::clear_signature() {
  if (GetArenaForAllocation() == nullptr && _impl_.signature_ != nullptr) {
    delete _impl_.signature_;
  }
  _impl_.signature_ = nullptr;
}
BlocksQuery::BlocksQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.BlocksQuery)
}
BlocksQuery::BlocksQuery(const BlocksQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlocksQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    _this->_impl_.meta_ = new ::iroha::protocol::QueryPayloadMeta(*from._impl_.meta_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::iroha::protocol::Signature(*from._impl_.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.BlocksQuery)
}

inline void BlocksQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlocksQuery::~BlocksQuery() {
  // @@protoc_insertion_point(destructor:iroha.protocol.BlocksQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlocksQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.meta_;
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void BlocksQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlocksQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.BlocksQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.signature_ != nullptr) {
    delete _impl_.signature_;
  }
  _impl_.signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlocksQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iroha.protocol.QueryPayloadMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iroha.protocol.Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlocksQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.BlocksQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.QueryPayloadMeta meta = 1;
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  // .iroha.protocol.Signature signature = 2;
  if (this->_internal_has_signature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.BlocksQuery)
  return target;
}

size_t BlocksQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.BlocksQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.QueryPayloadMeta meta = 1;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  // .iroha.protocol.Signature signature = 2;
  if (this->_internal_has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlocksQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlocksQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlocksQuery::GetClassData() const { return &_class_data_; }


void BlocksQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlocksQuery*>(&to_msg);
  auto& from = static_cast<const BlocksQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.BlocksQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meta()) {
    _this->_internal_mutable_meta()->::iroha::protocol::QueryPayloadMeta::MergeFrom(
        from._internal_meta());
  }
  if (from._internal_has_signature()) {
    _this->_internal_mutable_signature()->::iroha::protocol::Signature::MergeFrom(
        from._internal_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlocksQuery::CopyFrom(const BlocksQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.BlocksQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlocksQuery::IsInitialized() const {
  return true;
}

void BlocksQuery::InternalSwap(BlocksQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlocksQuery, _impl_.signature_)
      + sizeof(BlocksQuery::_impl_.signature_)
      - PROTOBUF_FIELD_OFFSET(BlocksQuery, _impl_.meta_)>(
          reinterpret_cast<char*>(&_impl_.meta_),
          reinterpret_cast<char*>(&other->_impl_.meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlocksQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_queries_2eproto_getter, &descriptor_table_queries_2eproto_once,
      file_level_metadata_queries_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::protocol::Ordering_FieldOrdering*
Arena::CreateMaybeMessage< ::iroha::protocol::Ordering_FieldOrdering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Ordering_FieldOrdering >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Ordering*
Arena::CreateMaybeMessage< ::iroha::protocol::Ordering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Ordering >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::TxPaginationMeta*
Arena::CreateMaybeMessage< ::iroha::protocol::TxPaginationMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::TxPaginationMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AssetPaginationMeta*
Arena::CreateMaybeMessage< ::iroha::protocol::AssetPaginationMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AssetPaginationMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccount*
Arena::CreateMaybeMessage< ::iroha::protocol::GetAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetBlock*
Arena::CreateMaybeMessage< ::iroha::protocol::GetBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetSignatories*
Arena::CreateMaybeMessage< ::iroha::protocol::GetSignatories >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetSignatories >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccountTransactions*
Arena::CreateMaybeMessage< ::iroha::protocol::GetAccountTransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccountTransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccountAssetTransactions*
Arena::CreateMaybeMessage< ::iroha::protocol::GetAccountAssetTransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccountAssetTransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetTransactions*
Arena::CreateMaybeMessage< ::iroha::protocol::GetTransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetTransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccountAssets*
Arena::CreateMaybeMessage< ::iroha::protocol::GetAccountAssets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccountAssets >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AccountDetailPaginationMeta*
Arena::CreateMaybeMessage< ::iroha::protocol::AccountDetailPaginationMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AccountDetailPaginationMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccountDetail*
Arena::CreateMaybeMessage< ::iroha::protocol::GetAccountDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccountDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAssetInfo*
Arena::CreateMaybeMessage< ::iroha::protocol::GetAssetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAssetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetRoles*
Arena::CreateMaybeMessage< ::iroha::protocol::GetRoles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetRoles >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetRolePermissions*
Arena::CreateMaybeMessage< ::iroha::protocol::GetRolePermissions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetRolePermissions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetPendingTransactions*
Arena::CreateMaybeMessage< ::iroha::protocol::GetPendingTransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetPendingTransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetPeers*
Arena::CreateMaybeMessage< ::iroha::protocol::GetPeers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetPeers >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::QueryPayloadMeta*
Arena::CreateMaybeMessage< ::iroha::protocol::QueryPayloadMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::QueryPayloadMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetEngineReceipts*
Arena::CreateMaybeMessage< ::iroha::protocol::GetEngineReceipts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetEngineReceipts >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Query_Payload*
Arena::CreateMaybeMessage< ::iroha::protocol::Query_Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Query_Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Query*
Arena::CreateMaybeMessage< ::iroha::protocol::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::BlocksQuery*
Arena::CreateMaybeMessage< ::iroha::protocol::BlocksQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::BlocksQuery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
