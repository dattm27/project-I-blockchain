// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitive.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_primitive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_primitive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_primitive_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_primitive_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_primitive_2eproto;
namespace iroha {
namespace protocol {
class AccountDetailRecordId;
struct AccountDetailRecordIdDefaultTypeInternal;
extern AccountDetailRecordIdDefaultTypeInternal _AccountDetailRecordId_default_instance_;
class CallResult;
struct CallResultDefaultTypeInternal;
extern CallResultDefaultTypeInternal _CallResult_default_instance_;
class EngineLog;
struct EngineLogDefaultTypeInternal;
extern EngineLogDefaultTypeInternal _EngineLog_default_instance_;
class EngineReceipt;
struct EngineReceiptDefaultTypeInternal;
extern EngineReceiptDefaultTypeInternal _EngineReceipt_default_instance_;
class Peer;
struct PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class Signature;
struct SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> ::iroha::protocol::AccountDetailRecordId* Arena::CreateMaybeMessage<::iroha::protocol::AccountDetailRecordId>(Arena*);
template<> ::iroha::protocol::CallResult* Arena::CreateMaybeMessage<::iroha::protocol::CallResult>(Arena*);
template<> ::iroha::protocol::EngineLog* Arena::CreateMaybeMessage<::iroha::protocol::EngineLog>(Arena*);
template<> ::iroha::protocol::EngineReceipt* Arena::CreateMaybeMessage<::iroha::protocol::EngineReceipt>(Arena*);
template<> ::iroha::protocol::Peer* Arena::CreateMaybeMessage<::iroha::protocol::Peer>(Arena*);
template<> ::iroha::protocol::Signature* Arena::CreateMaybeMessage<::iroha::protocol::Signature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iroha {
namespace protocol {

enum RolePermission : int {
  can_append_role = 0,
  can_create_role = 1,
  can_detach_role = 2,
  can_add_asset_qty = 3,
  can_subtract_asset_qty = 4,
  can_add_peer = 5,
  can_remove_peer = 46,
  can_add_signatory = 6,
  can_remove_signatory = 7,
  can_set_quorum = 8,
  can_create_account = 9,
  can_set_detail = 10,
  can_create_asset = 11,
  can_transfer = 12,
  can_receive = 13,
  can_create_domain = 14,
  can_add_domain_asset_qty = 43,
  can_subtract_domain_asset_qty = 44,
  can_call_engine = 48,
  can_read_assets = 15,
  can_get_roles = 16,
  can_get_my_account = 17,
  can_get_all_accounts = 18,
  can_get_domain_accounts = 19,
  can_get_my_signatories = 20,
  can_get_all_signatories = 21,
  can_get_domain_signatories = 22,
  can_get_my_acc_ast = 23,
  can_get_all_acc_ast = 24,
  can_get_domain_acc_ast = 25,
  can_get_my_acc_detail = 26,
  can_get_all_acc_detail = 27,
  can_get_domain_acc_detail = 28,
  can_get_my_acc_txs = 29,
  can_get_all_acc_txs = 30,
  can_get_domain_acc_txs = 31,
  can_get_my_acc_ast_txs = 32,
  can_get_all_acc_ast_txs = 33,
  can_get_domain_acc_ast_txs = 34,
  can_get_my_txs = 35,
  can_get_all_txs = 36,
  can_get_blocks = 42,
  can_get_peers = 45,
  can_get_my_engine_receipts = 50,
  can_get_domain_engine_receipts = 51,
  can_get_all_engine_receipts = 52,
  can_grant_can_set_my_quorum = 37,
  can_grant_can_add_my_signatory = 38,
  can_grant_can_remove_my_signatory = 39,
  can_grant_can_transfer_my_assets = 40,
  can_grant_can_set_my_account_detail = 41,
  can_grant_can_call_engine_on_my_behalf = 49,
  root = 47,
  RolePermission_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RolePermission_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RolePermission_IsValid(int value);
constexpr RolePermission RolePermission_MIN = can_append_role;
constexpr RolePermission RolePermission_MAX = can_get_all_engine_receipts;
constexpr int RolePermission_ARRAYSIZE = RolePermission_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RolePermission_descriptor();
template<typename T>
inline const std::string& RolePermission_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RolePermission>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RolePermission_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RolePermission_descriptor(), enum_t_value);
}
inline bool RolePermission_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RolePermission* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RolePermission>(
    RolePermission_descriptor(), name, value);
}
enum GrantablePermission : int {
  can_add_my_signatory = 0,
  can_remove_my_signatory = 1,
  can_set_my_quorum = 2,
  can_set_my_account_detail = 3,
  can_transfer_my_assets = 4,
  can_call_engine_on_my_behalf = 5,
  GrantablePermission_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GrantablePermission_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GrantablePermission_IsValid(int value);
constexpr GrantablePermission GrantablePermission_MIN = can_add_my_signatory;
constexpr GrantablePermission GrantablePermission_MAX = can_call_engine_on_my_behalf;
constexpr int GrantablePermission_ARRAYSIZE = GrantablePermission_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GrantablePermission_descriptor();
template<typename T>
inline const std::string& GrantablePermission_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GrantablePermission>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GrantablePermission_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GrantablePermission_descriptor(), enum_t_value);
}
inline bool GrantablePermission_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GrantablePermission* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GrantablePermission>(
    GrantablePermission_descriptor(), name, value);
}
// ===================================================================

class Signature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  ~Signature() override;
  explicit PROTOBUF_CONSTEXPR Signature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Signature& from) {
    Signature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.Signature";
  }
  protected:
  explicit Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // string public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // string signature = 2;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:iroha.protocol.Signature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_primitive_2eproto;
};
// -------------------------------------------------------------------

class Peer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.Peer) */ {
 public:
  inline Peer() : Peer(nullptr) {}
  ~Peer() override;
  explicit PROTOBUF_CONSTEXPR Peer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Peer(const Peer& from);
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peer& operator=(Peer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Peer& default_instance() {
    return *internal_default_instance();
  }
  enum CertificateCase {
    kTlsCertificate = 3,
    CERTIFICATE_NOT_SET = 0,
  };

  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Peer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Peer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Peer& from) {
    Peer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.Peer";
  }
  protected:
  explicit Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPeerKeyFieldNumber = 2,
    kSyncingPeerFieldNumber = 4,
    kTlsCertificateFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string peer_key = 2;
  void clear_peer_key();
  const std::string& peer_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer_key();
  PROTOBUF_NODISCARD std::string* release_peer_key();
  void set_allocated_peer_key(std::string* peer_key);
  private:
  const std::string& _internal_peer_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer_key(const std::string& value);
  std::string* _internal_mutable_peer_key();
  public:

  // bool syncing_peer = 4;
  void clear_syncing_peer();
  bool syncing_peer() const;
  void set_syncing_peer(bool value);
  private:
  bool _internal_syncing_peer() const;
  void _internal_set_syncing_peer(bool value);
  public:

  // string tls_certificate = 3;
  bool has_tls_certificate() const;
  private:
  bool _internal_has_tls_certificate() const;
  public:
  void clear_tls_certificate();
  const std::string& tls_certificate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tls_certificate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tls_certificate();
  PROTOBUF_NODISCARD std::string* release_tls_certificate();
  void set_allocated_tls_certificate(std::string* tls_certificate);
  private:
  const std::string& _internal_tls_certificate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tls_certificate(const std::string& value);
  std::string* _internal_mutable_tls_certificate();
  public:

  void clear_certificate();
  CertificateCase certificate_case() const;
  // @@protoc_insertion_point(class_scope:iroha.protocol.Peer)
 private:
  class _Internal;
  void set_has_tls_certificate();

  inline bool has_certificate() const;
  inline void clear_has_certificate();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_key_;
    bool syncing_peer_;
    union CertificateUnion {
      constexpr CertificateUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tls_certificate_;
    } certificate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_primitive_2eproto;
};
// -------------------------------------------------------------------

class AccountDetailRecordId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.AccountDetailRecordId) */ {
 public:
  inline AccountDetailRecordId() : AccountDetailRecordId(nullptr) {}
  ~AccountDetailRecordId() override;
  explicit PROTOBUF_CONSTEXPR AccountDetailRecordId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountDetailRecordId(const AccountDetailRecordId& from);
  AccountDetailRecordId(AccountDetailRecordId&& from) noexcept
    : AccountDetailRecordId() {
    *this = ::std::move(from);
  }

  inline AccountDetailRecordId& operator=(const AccountDetailRecordId& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountDetailRecordId& operator=(AccountDetailRecordId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountDetailRecordId& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountDetailRecordId* internal_default_instance() {
    return reinterpret_cast<const AccountDetailRecordId*>(
               &_AccountDetailRecordId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccountDetailRecordId& a, AccountDetailRecordId& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountDetailRecordId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountDetailRecordId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountDetailRecordId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountDetailRecordId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountDetailRecordId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountDetailRecordId& from) {
    AccountDetailRecordId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountDetailRecordId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.AccountDetailRecordId";
  }
  protected:
  explicit AccountDetailRecordId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriterFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // string writer = 1;
  void clear_writer();
  const std::string& writer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_writer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_writer();
  PROTOBUF_NODISCARD std::string* release_writer();
  void set_allocated_writer(std::string* writer);
  private:
  const std::string& _internal_writer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_writer(const std::string& value);
  std::string* _internal_mutable_writer();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:iroha.protocol.AccountDetailRecordId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr writer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_primitive_2eproto;
};
// -------------------------------------------------------------------

class EngineLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.EngineLog) */ {
 public:
  inline EngineLog() : EngineLog(nullptr) {}
  ~EngineLog() override;
  explicit PROTOBUF_CONSTEXPR EngineLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EngineLog(const EngineLog& from);
  EngineLog(EngineLog&& from) noexcept
    : EngineLog() {
    *this = ::std::move(from);
  }

  inline EngineLog& operator=(const EngineLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineLog& operator=(EngineLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EngineLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const EngineLog* internal_default_instance() {
    return reinterpret_cast<const EngineLog*>(
               &_EngineLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EngineLog& a, EngineLog& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EngineLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EngineLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EngineLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EngineLog& from) {
    EngineLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.EngineLog";
  }
  protected:
  explicit EngineLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 3,
    kAddressFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated string topics = 3;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();
  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  public:

  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:iroha.protocol.EngineLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_primitive_2eproto;
};
// -------------------------------------------------------------------

class CallResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.CallResult) */ {
 public:
  inline CallResult() : CallResult(nullptr) {}
  ~CallResult() override;
  explicit PROTOBUF_CONSTEXPR CallResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallResult(const CallResult& from);
  CallResult(CallResult&& from) noexcept
    : CallResult() {
    *this = ::std::move(from);
  }

  inline CallResult& operator=(const CallResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallResult& operator=(CallResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallResult* internal_default_instance() {
    return reinterpret_cast<const CallResult*>(
               &_CallResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CallResult& a, CallResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CallResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CallResult& from) {
    CallResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.CallResult";
  }
  protected:
  explicit CallResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalleeFieldNumber = 1,
    kResultDataFieldNumber = 2,
  };
  // string callee = 1;
  void clear_callee();
  const std::string& callee() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callee(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callee();
  PROTOBUF_NODISCARD std::string* release_callee();
  void set_allocated_callee(std::string* callee);
  private:
  const std::string& _internal_callee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callee(const std::string& value);
  std::string* _internal_mutable_callee();
  public:

  // string result_data = 2;
  void clear_result_data();
  const std::string& result_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_data();
  PROTOBUF_NODISCARD std::string* release_result_data();
  void set_allocated_result_data(std::string* result_data);
  private:
  const std::string& _internal_result_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_data(const std::string& value);
  std::string* _internal_mutable_result_data();
  public:

  // @@protoc_insertion_point(class_scope:iroha.protocol.CallResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callee_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_primitive_2eproto;
};
// -------------------------------------------------------------------

class EngineReceipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.EngineReceipt) */ {
 public:
  inline EngineReceipt() : EngineReceipt(nullptr) {}
  ~EngineReceipt() override;
  explicit PROTOBUF_CONSTEXPR EngineReceipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EngineReceipt(const EngineReceipt& from);
  EngineReceipt(EngineReceipt&& from) noexcept
    : EngineReceipt() {
    *this = ::std::move(from);
  }

  inline EngineReceipt& operator=(const EngineReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineReceipt& operator=(EngineReceipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EngineReceipt& default_instance() {
    return *internal_default_instance();
  }
  enum ResultOrContractAddressCase {
    kCallResult = 3,
    kContractAddress = 4,
    RESULT_OR_CONTRACT_ADDRESS_NOT_SET = 0,
  };

  static inline const EngineReceipt* internal_default_instance() {
    return reinterpret_cast<const EngineReceipt*>(
               &_EngineReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EngineReceipt& a, EngineReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineReceipt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EngineReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EngineReceipt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EngineReceipt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EngineReceipt& from) {
    EngineReceipt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineReceipt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.EngineReceipt";
  }
  protected:
  explicit EngineReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 5,
    kCallerFieldNumber = 2,
    kCommandIndexFieldNumber = 1,
    kCallResultFieldNumber = 3,
    kContractAddressFieldNumber = 4,
  };
  // repeated .iroha.protocol.EngineLog logs = 5;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::iroha::protocol::EngineLog* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::EngineLog >*
      mutable_logs();
  private:
  const ::iroha::protocol::EngineLog& _internal_logs(int index) const;
  ::iroha::protocol::EngineLog* _internal_add_logs();
  public:
  const ::iroha::protocol::EngineLog& logs(int index) const;
  ::iroha::protocol::EngineLog* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::EngineLog >&
      logs() const;

  // string caller = 2;
  void clear_caller();
  const std::string& caller() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_caller(ArgT0&& arg0, ArgT... args);
  std::string* mutable_caller();
  PROTOBUF_NODISCARD std::string* release_caller();
  void set_allocated_caller(std::string* caller);
  private:
  const std::string& _internal_caller() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_caller(const std::string& value);
  std::string* _internal_mutable_caller();
  public:

  // int32 command_index = 1;
  void clear_command_index();
  int32_t command_index() const;
  void set_command_index(int32_t value);
  private:
  int32_t _internal_command_index() const;
  void _internal_set_command_index(int32_t value);
  public:

  // .iroha.protocol.CallResult call_result = 3;
  bool has_call_result() const;
  private:
  bool _internal_has_call_result() const;
  public:
  void clear_call_result();
  const ::iroha::protocol::CallResult& call_result() const;
  PROTOBUF_NODISCARD ::iroha::protocol::CallResult* release_call_result();
  ::iroha::protocol::CallResult* mutable_call_result();
  void set_allocated_call_result(::iroha::protocol::CallResult* call_result);
  private:
  const ::iroha::protocol::CallResult& _internal_call_result() const;
  ::iroha::protocol::CallResult* _internal_mutable_call_result();
  public:
  void unsafe_arena_set_allocated_call_result(
      ::iroha::protocol::CallResult* call_result);
  ::iroha::protocol::CallResult* unsafe_arena_release_call_result();

  // string contract_address = 4;
  bool has_contract_address() const;
  private:
  bool _internal_has_contract_address() const;
  public:
  void clear_contract_address();
  const std::string& contract_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_address();
  PROTOBUF_NODISCARD std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);
  private:
  const std::string& _internal_contract_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_address(const std::string& value);
  std::string* _internal_mutable_contract_address();
  public:

  void clear_result_or_contract_address();
  ResultOrContractAddressCase result_or_contract_address_case() const;
  // @@protoc_insertion_point(class_scope:iroha.protocol.EngineReceipt)
 private:
  class _Internal;
  void set_has_call_result();
  void set_has_contract_address();

  inline bool has_result_or_contract_address() const;
  inline void clear_has_result_or_contract_address();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::EngineLog > logs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caller_;
    int32_t command_index_;
    union ResultOrContractAddressUnion {
      constexpr ResultOrContractAddressUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::iroha::protocol::CallResult* call_result_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
    } result_or_contract_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_primitive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Signature

// string public_key = 1;
inline void Signature::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& Signature::public_key() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Signature.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signature::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.Signature.public_key)
}
inline std::string* Signature::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Signature.public_key)
  return _s;
}
inline const std::string& Signature::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void Signature::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Signature::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Signature::release_public_key() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Signature.public_key)
  return _impl_.public_key_.Release();
}
inline void Signature::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Signature.public_key)
}

// string signature = 2;
inline void Signature::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Signature.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signature::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.Signature.signature)
}
inline std::string* Signature::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Signature.signature)
  return _s;
}
inline const std::string& Signature::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Signature::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Signature::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Signature.signature)
  return _impl_.signature_.Release();
}
inline void Signature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Signature.signature)
}

// -------------------------------------------------------------------

// Peer

// string address = 1;
inline void Peer::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Peer::address() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Peer.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Peer::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.Peer.address)
}
inline std::string* Peer::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Peer.address)
  return _s;
}
inline const std::string& Peer::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Peer::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* Peer::release_address() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Peer.address)
  return _impl_.address_.Release();
}
inline void Peer::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Peer.address)
}

// string peer_key = 2;
inline void Peer::clear_peer_key() {
  _impl_.peer_key_.ClearToEmpty();
}
inline const std::string& Peer::peer_key() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Peer.peer_key)
  return _internal_peer_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Peer::set_peer_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.peer_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.Peer.peer_key)
}
inline std::string* Peer::mutable_peer_key() {
  std::string* _s = _internal_mutable_peer_key();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Peer.peer_key)
  return _s;
}
inline const std::string& Peer::_internal_peer_key() const {
  return _impl_.peer_key_.Get();
}
inline void Peer::_internal_set_peer_key(const std::string& value) {
  
  _impl_.peer_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_peer_key() {
  
  return _impl_.peer_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Peer::release_peer_key() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Peer.peer_key)
  return _impl_.peer_key_.Release();
}
inline void Peer::set_allocated_peer_key(std::string* peer_key) {
  if (peer_key != nullptr) {
    
  } else {
    
  }
  _impl_.peer_key_.SetAllocated(peer_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.peer_key_.IsDefault()) {
    _impl_.peer_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Peer.peer_key)
}

// string tls_certificate = 3;
inline bool Peer::_internal_has_tls_certificate() const {
  return certificate_case() == kTlsCertificate;
}
inline bool Peer::has_tls_certificate() const {
  return _internal_has_tls_certificate();
}
inline void Peer::set_has_tls_certificate() {
  _impl_._oneof_case_[0] = kTlsCertificate;
}
inline void Peer::clear_tls_certificate() {
  if (_internal_has_tls_certificate()) {
    _impl_.certificate_.tls_certificate_.Destroy();
    clear_has_certificate();
  }
}
inline const std::string& Peer::tls_certificate() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Peer.tls_certificate)
  return _internal_tls_certificate();
}
template <typename ArgT0, typename... ArgT>
inline void Peer::set_tls_certificate(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_tls_certificate()) {
    clear_certificate();
    set_has_tls_certificate();
    _impl_.certificate_.tls_certificate_.InitDefault();
  }
  _impl_.certificate_.tls_certificate_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.Peer.tls_certificate)
}
inline std::string* Peer::mutable_tls_certificate() {
  std::string* _s = _internal_mutable_tls_certificate();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Peer.tls_certificate)
  return _s;
}
inline const std::string& Peer::_internal_tls_certificate() const {
  if (_internal_has_tls_certificate()) {
    return _impl_.certificate_.tls_certificate_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Peer::_internal_set_tls_certificate(const std::string& value) {
  if (!_internal_has_tls_certificate()) {
    clear_certificate();
    set_has_tls_certificate();
    _impl_.certificate_.tls_certificate_.InitDefault();
  }
  _impl_.certificate_.tls_certificate_.Set(value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_tls_certificate() {
  if (!_internal_has_tls_certificate()) {
    clear_certificate();
    set_has_tls_certificate();
    _impl_.certificate_.tls_certificate_.InitDefault();
  }
  return _impl_.certificate_.tls_certificate_.Mutable(      GetArenaForAllocation());
}
inline std::string* Peer::release_tls_certificate() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Peer.tls_certificate)
  if (_internal_has_tls_certificate()) {
    clear_has_certificate();
    return _impl_.certificate_.tls_certificate_.Release();
  } else {
    return nullptr;
  }
}
inline void Peer::set_allocated_tls_certificate(std::string* tls_certificate) {
  if (has_certificate()) {
    clear_certificate();
  }
  if (tls_certificate != nullptr) {
    set_has_tls_certificate();
    _impl_.certificate_.tls_certificate_.InitAllocated(tls_certificate, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Peer.tls_certificate)
}

// bool syncing_peer = 4;
inline void Peer::clear_syncing_peer() {
  _impl_.syncing_peer_ = false;
}
inline bool Peer::_internal_syncing_peer() const {
  return _impl_.syncing_peer_;
}
inline bool Peer::syncing_peer() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Peer.syncing_peer)
  return _internal_syncing_peer();
}
inline void Peer::_internal_set_syncing_peer(bool value) {
  
  _impl_.syncing_peer_ = value;
}
inline void Peer::set_syncing_peer(bool value) {
  _internal_set_syncing_peer(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.Peer.syncing_peer)
}

inline bool Peer::has_certificate() const {
  return certificate_case() != CERTIFICATE_NOT_SET;
}
inline void Peer::clear_has_certificate() {
  _impl_._oneof_case_[0] = CERTIFICATE_NOT_SET;
}
inline Peer::CertificateCase Peer::certificate_case() const {
  return Peer::CertificateCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AccountDetailRecordId

// string writer = 1;
inline void AccountDetailRecordId::clear_writer() {
  _impl_.writer_.ClearToEmpty();
}
inline const std::string& AccountDetailRecordId::writer() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.AccountDetailRecordId.writer)
  return _internal_writer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountDetailRecordId::set_writer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.writer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.AccountDetailRecordId.writer)
}
inline std::string* AccountDetailRecordId::mutable_writer() {
  std::string* _s = _internal_mutable_writer();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.AccountDetailRecordId.writer)
  return _s;
}
inline const std::string& AccountDetailRecordId::_internal_writer() const {
  return _impl_.writer_.Get();
}
inline void AccountDetailRecordId::_internal_set_writer(const std::string& value) {
  
  _impl_.writer_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetailRecordId::_internal_mutable_writer() {
  
  return _impl_.writer_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountDetailRecordId::release_writer() {
  // @@protoc_insertion_point(field_release:iroha.protocol.AccountDetailRecordId.writer)
  return _impl_.writer_.Release();
}
inline void AccountDetailRecordId::set_allocated_writer(std::string* writer) {
  if (writer != nullptr) {
    
  } else {
    
  }
  _impl_.writer_.SetAllocated(writer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.writer_.IsDefault()) {
    _impl_.writer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.AccountDetailRecordId.writer)
}

// string key = 2;
inline void AccountDetailRecordId::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& AccountDetailRecordId::key() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.AccountDetailRecordId.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountDetailRecordId::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.AccountDetailRecordId.key)
}
inline std::string* AccountDetailRecordId::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.AccountDetailRecordId.key)
  return _s;
}
inline const std::string& AccountDetailRecordId::_internal_key() const {
  return _impl_.key_.Get();
}
inline void AccountDetailRecordId::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetailRecordId::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountDetailRecordId::release_key() {
  // @@protoc_insertion_point(field_release:iroha.protocol.AccountDetailRecordId.key)
  return _impl_.key_.Release();
}
inline void AccountDetailRecordId::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.AccountDetailRecordId.key)
}

// -------------------------------------------------------------------

// EngineLog

// string address = 1;
inline void EngineLog::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& EngineLog::address() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.EngineLog.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EngineLog::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.EngineLog.address)
}
inline std::string* EngineLog::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.EngineLog.address)
  return _s;
}
inline const std::string& EngineLog::_internal_address() const {
  return _impl_.address_.Get();
}
inline void EngineLog::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* EngineLog::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* EngineLog::release_address() {
  // @@protoc_insertion_point(field_release:iroha.protocol.EngineLog.address)
  return _impl_.address_.Release();
}
inline void EngineLog::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.EngineLog.address)
}

// string data = 2;
inline void EngineLog::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& EngineLog::data() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.EngineLog.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EngineLog::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.EngineLog.data)
}
inline std::string* EngineLog::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.EngineLog.data)
  return _s;
}
inline const std::string& EngineLog::_internal_data() const {
  return _impl_.data_.Get();
}
inline void EngineLog::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* EngineLog::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* EngineLog::release_data() {
  // @@protoc_insertion_point(field_release:iroha.protocol.EngineLog.data)
  return _impl_.data_.Release();
}
inline void EngineLog::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.EngineLog.data)
}

// repeated string topics = 3;
inline int EngineLog::_internal_topics_size() const {
  return _impl_.topics_.size();
}
inline int EngineLog::topics_size() const {
  return _internal_topics_size();
}
inline void EngineLog::clear_topics() {
  _impl_.topics_.Clear();
}
inline std::string* EngineLog::add_topics() {
  std::string* _s = _internal_add_topics();
  // @@protoc_insertion_point(field_add_mutable:iroha.protocol.EngineLog.topics)
  return _s;
}
inline const std::string& EngineLog::_internal_topics(int index) const {
  return _impl_.topics_.Get(index);
}
inline const std::string& EngineLog::topics(int index) const {
  // @@protoc_insertion_point(field_get:iroha.protocol.EngineLog.topics)
  return _internal_topics(index);
}
inline std::string* EngineLog::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.EngineLog.topics)
  return _impl_.topics_.Mutable(index);
}
inline void EngineLog::set_topics(int index, const std::string& value) {
  _impl_.topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.EngineLog.topics)
}
inline void EngineLog::set_topics(int index, std::string&& value) {
  _impl_.topics_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iroha.protocol.EngineLog.topics)
}
inline void EngineLog::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iroha.protocol.EngineLog.topics)
}
inline void EngineLog::set_topics(int index, const char* value, size_t size) {
  _impl_.topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iroha.protocol.EngineLog.topics)
}
inline std::string* EngineLog::_internal_add_topics() {
  return _impl_.topics_.Add();
}
inline void EngineLog::add_topics(const std::string& value) {
  _impl_.topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iroha.protocol.EngineLog.topics)
}
inline void EngineLog::add_topics(std::string&& value) {
  _impl_.topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iroha.protocol.EngineLog.topics)
}
inline void EngineLog::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iroha.protocol.EngineLog.topics)
}
inline void EngineLog::add_topics(const char* value, size_t size) {
  _impl_.topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iroha.protocol.EngineLog.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EngineLog::topics() const {
  // @@protoc_insertion_point(field_list:iroha.protocol.EngineLog.topics)
  return _impl_.topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EngineLog::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:iroha.protocol.EngineLog.topics)
  return &_impl_.topics_;
}

// -------------------------------------------------------------------

// CallResult

// string callee = 1;
inline void CallResult::clear_callee() {
  _impl_.callee_.ClearToEmpty();
}
inline const std::string& CallResult::callee() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.CallResult.callee)
  return _internal_callee();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallResult::set_callee(ArgT0&& arg0, ArgT... args) {
 
 _impl_.callee_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.CallResult.callee)
}
inline std::string* CallResult::mutable_callee() {
  std::string* _s = _internal_mutable_callee();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.CallResult.callee)
  return _s;
}
inline const std::string& CallResult::_internal_callee() const {
  return _impl_.callee_.Get();
}
inline void CallResult::_internal_set_callee(const std::string& value) {
  
  _impl_.callee_.Set(value, GetArenaForAllocation());
}
inline std::string* CallResult::_internal_mutable_callee() {
  
  return _impl_.callee_.Mutable(GetArenaForAllocation());
}
inline std::string* CallResult::release_callee() {
  // @@protoc_insertion_point(field_release:iroha.protocol.CallResult.callee)
  return _impl_.callee_.Release();
}
inline void CallResult::set_allocated_callee(std::string* callee) {
  if (callee != nullptr) {
    
  } else {
    
  }
  _impl_.callee_.SetAllocated(callee, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.callee_.IsDefault()) {
    _impl_.callee_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.CallResult.callee)
}

// string result_data = 2;
inline void CallResult::clear_result_data() {
  _impl_.result_data_.ClearToEmpty();
}
inline const std::string& CallResult::result_data() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.CallResult.result_data)
  return _internal_result_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallResult::set_result_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.CallResult.result_data)
}
inline std::string* CallResult::mutable_result_data() {
  std::string* _s = _internal_mutable_result_data();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.CallResult.result_data)
  return _s;
}
inline const std::string& CallResult::_internal_result_data() const {
  return _impl_.result_data_.Get();
}
inline void CallResult::_internal_set_result_data(const std::string& value) {
  
  _impl_.result_data_.Set(value, GetArenaForAllocation());
}
inline std::string* CallResult::_internal_mutable_result_data() {
  
  return _impl_.result_data_.Mutable(GetArenaForAllocation());
}
inline std::string* CallResult::release_result_data() {
  // @@protoc_insertion_point(field_release:iroha.protocol.CallResult.result_data)
  return _impl_.result_data_.Release();
}
inline void CallResult::set_allocated_result_data(std::string* result_data) {
  if (result_data != nullptr) {
    
  } else {
    
  }
  _impl_.result_data_.SetAllocated(result_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_data_.IsDefault()) {
    _impl_.result_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.CallResult.result_data)
}

// -------------------------------------------------------------------

// EngineReceipt

// int32 command_index = 1;
inline void EngineReceipt::clear_command_index() {
  _impl_.command_index_ = 0;
}
inline int32_t EngineReceipt::_internal_command_index() const {
  return _impl_.command_index_;
}
inline int32_t EngineReceipt::command_index() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.EngineReceipt.command_index)
  return _internal_command_index();
}
inline void EngineReceipt::_internal_set_command_index(int32_t value) {
  
  _impl_.command_index_ = value;
}
inline void EngineReceipt::set_command_index(int32_t value) {
  _internal_set_command_index(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.EngineReceipt.command_index)
}

// string caller = 2;
inline void EngineReceipt::clear_caller() {
  _impl_.caller_.ClearToEmpty();
}
inline const std::string& EngineReceipt::caller() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.EngineReceipt.caller)
  return _internal_caller();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EngineReceipt::set_caller(ArgT0&& arg0, ArgT... args) {
 
 _impl_.caller_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.EngineReceipt.caller)
}
inline std::string* EngineReceipt::mutable_caller() {
  std::string* _s = _internal_mutable_caller();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.EngineReceipt.caller)
  return _s;
}
inline const std::string& EngineReceipt::_internal_caller() const {
  return _impl_.caller_.Get();
}
inline void EngineReceipt::_internal_set_caller(const std::string& value) {
  
  _impl_.caller_.Set(value, GetArenaForAllocation());
}
inline std::string* EngineReceipt::_internal_mutable_caller() {
  
  return _impl_.caller_.Mutable(GetArenaForAllocation());
}
inline std::string* EngineReceipt::release_caller() {
  // @@protoc_insertion_point(field_release:iroha.protocol.EngineReceipt.caller)
  return _impl_.caller_.Release();
}
inline void EngineReceipt::set_allocated_caller(std::string* caller) {
  if (caller != nullptr) {
    
  } else {
    
  }
  _impl_.caller_.SetAllocated(caller, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.caller_.IsDefault()) {
    _impl_.caller_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.EngineReceipt.caller)
}

// .iroha.protocol.CallResult call_result = 3;
inline bool EngineReceipt::_internal_has_call_result() const {
  return result_or_contract_address_case() == kCallResult;
}
inline bool EngineReceipt::has_call_result() const {
  return _internal_has_call_result();
}
inline void EngineReceipt::set_has_call_result() {
  _impl_._oneof_case_[0] = kCallResult;
}
inline void EngineReceipt::clear_call_result() {
  if (_internal_has_call_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_or_contract_address_.call_result_;
    }
    clear_has_result_or_contract_address();
  }
}
inline ::iroha::protocol::CallResult* EngineReceipt::release_call_result() {
  // @@protoc_insertion_point(field_release:iroha.protocol.EngineReceipt.call_result)
  if (_internal_has_call_result()) {
    clear_has_result_or_contract_address();
    ::iroha::protocol::CallResult* temp = _impl_.result_or_contract_address_.call_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_or_contract_address_.call_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iroha::protocol::CallResult& EngineReceipt::_internal_call_result() const {
  return _internal_has_call_result()
      ? *_impl_.result_or_contract_address_.call_result_
      : reinterpret_cast< ::iroha::protocol::CallResult&>(::iroha::protocol::_CallResult_default_instance_);
}
inline const ::iroha::protocol::CallResult& EngineReceipt::call_result() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.EngineReceipt.call_result)
  return _internal_call_result();
}
inline ::iroha::protocol::CallResult* EngineReceipt::unsafe_arena_release_call_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iroha.protocol.EngineReceipt.call_result)
  if (_internal_has_call_result()) {
    clear_has_result_or_contract_address();
    ::iroha::protocol::CallResult* temp = _impl_.result_or_contract_address_.call_result_;
    _impl_.result_or_contract_address_.call_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EngineReceipt::unsafe_arena_set_allocated_call_result(::iroha::protocol::CallResult* call_result) {
  clear_result_or_contract_address();
  if (call_result) {
    set_has_call_result();
    _impl_.result_or_contract_address_.call_result_ = call_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.protocol.EngineReceipt.call_result)
}
inline ::iroha::protocol::CallResult* EngineReceipt::_internal_mutable_call_result() {
  if (!_internal_has_call_result()) {
    clear_result_or_contract_address();
    set_has_call_result();
    _impl_.result_or_contract_address_.call_result_ = CreateMaybeMessage< ::iroha::protocol::CallResult >(GetArenaForAllocation());
  }
  return _impl_.result_or_contract_address_.call_result_;
}
inline ::iroha::protocol::CallResult* EngineReceipt::mutable_call_result() {
  ::iroha::protocol::CallResult* _msg = _internal_mutable_call_result();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.EngineReceipt.call_result)
  return _msg;
}

// string contract_address = 4;
inline bool EngineReceipt::_internal_has_contract_address() const {
  return result_or_contract_address_case() == kContractAddress;
}
inline bool EngineReceipt::has_contract_address() const {
  return _internal_has_contract_address();
}
inline void EngineReceipt::set_has_contract_address() {
  _impl_._oneof_case_[0] = kContractAddress;
}
inline void EngineReceipt::clear_contract_address() {
  if (_internal_has_contract_address()) {
    _impl_.result_or_contract_address_.contract_address_.Destroy();
    clear_has_result_or_contract_address();
  }
}
inline const std::string& EngineReceipt::contract_address() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.EngineReceipt.contract_address)
  return _internal_contract_address();
}
template <typename ArgT0, typename... ArgT>
inline void EngineReceipt::set_contract_address(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_contract_address()) {
    clear_result_or_contract_address();
    set_has_contract_address();
    _impl_.result_or_contract_address_.contract_address_.InitDefault();
  }
  _impl_.result_or_contract_address_.contract_address_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.protocol.EngineReceipt.contract_address)
}
inline std::string* EngineReceipt::mutable_contract_address() {
  std::string* _s = _internal_mutable_contract_address();
  // @@protoc_insertion_point(field_mutable:iroha.protocol.EngineReceipt.contract_address)
  return _s;
}
inline const std::string& EngineReceipt::_internal_contract_address() const {
  if (_internal_has_contract_address()) {
    return _impl_.result_or_contract_address_.contract_address_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EngineReceipt::_internal_set_contract_address(const std::string& value) {
  if (!_internal_has_contract_address()) {
    clear_result_or_contract_address();
    set_has_contract_address();
    _impl_.result_or_contract_address_.contract_address_.InitDefault();
  }
  _impl_.result_or_contract_address_.contract_address_.Set(value, GetArenaForAllocation());
}
inline std::string* EngineReceipt::_internal_mutable_contract_address() {
  if (!_internal_has_contract_address()) {
    clear_result_or_contract_address();
    set_has_contract_address();
    _impl_.result_or_contract_address_.contract_address_.InitDefault();
  }
  return _impl_.result_or_contract_address_.contract_address_.Mutable(      GetArenaForAllocation());
}
inline std::string* EngineReceipt::release_contract_address() {
  // @@protoc_insertion_point(field_release:iroha.protocol.EngineReceipt.contract_address)
  if (_internal_has_contract_address()) {
    clear_has_result_or_contract_address();
    return _impl_.result_or_contract_address_.contract_address_.Release();
  } else {
    return nullptr;
  }
}
inline void EngineReceipt::set_allocated_contract_address(std::string* contract_address) {
  if (has_result_or_contract_address()) {
    clear_result_or_contract_address();
  }
  if (contract_address != nullptr) {
    set_has_contract_address();
    _impl_.result_or_contract_address_.contract_address_.InitAllocated(contract_address, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.EngineReceipt.contract_address)
}

// repeated .iroha.protocol.EngineLog logs = 5;
inline int EngineReceipt::_internal_logs_size() const {
  return _impl_.logs_.size();
}
inline int EngineReceipt::logs_size() const {
  return _internal_logs_size();
}
inline void EngineReceipt::clear_logs() {
  _impl_.logs_.Clear();
}
inline ::iroha::protocol::EngineLog* EngineReceipt::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.EngineReceipt.logs)
  return _impl_.logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::EngineLog >*
EngineReceipt::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:iroha.protocol.EngineReceipt.logs)
  return &_impl_.logs_;
}
inline const ::iroha::protocol::EngineLog& EngineReceipt::_internal_logs(int index) const {
  return _impl_.logs_.Get(index);
}
inline const ::iroha::protocol::EngineLog& EngineReceipt::logs(int index) const {
  // @@protoc_insertion_point(field_get:iroha.protocol.EngineReceipt.logs)
  return _internal_logs(index);
}
inline ::iroha::protocol::EngineLog* EngineReceipt::_internal_add_logs() {
  return _impl_.logs_.Add();
}
inline ::iroha::protocol::EngineLog* EngineReceipt::add_logs() {
  ::iroha::protocol::EngineLog* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:iroha.protocol.EngineReceipt.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::EngineLog >&
EngineReceipt::logs() const {
  // @@protoc_insertion_point(field_list:iroha.protocol.EngineReceipt.logs)
  return _impl_.logs_;
}

inline bool EngineReceipt::has_result_or_contract_address() const {
  return result_or_contract_address_case() != RESULT_OR_CONTRACT_ADDRESS_NOT_SET;
}
inline void EngineReceipt::clear_has_result_or_contract_address() {
  _impl_._oneof_case_[0] = RESULT_OR_CONTRACT_ADDRESS_NOT_SET;
}
inline EngineReceipt::ResultOrContractAddressCase EngineReceipt::result_or_contract_address_case() const {
  return EngineReceipt::ResultOrContractAddressCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace iroha

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::iroha::protocol::RolePermission> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iroha::protocol::RolePermission>() {
  return ::iroha::protocol::RolePermission_descriptor();
}
template <> struct is_proto_enum< ::iroha::protocol::GrantablePermission> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iroha::protocol::GrantablePermission>() {
  return ::iroha::protocol::GrantablePermission_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_primitive_2eproto
