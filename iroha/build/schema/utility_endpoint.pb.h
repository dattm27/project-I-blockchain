// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utility_endpoint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_utility_5fendpoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_utility_5fendpoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_utility_5fendpoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_utility_5fendpoint_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_utility_5fendpoint_2eproto;
namespace iroha {
namespace utility_service {
namespace proto {
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace proto
}  // namespace utility_service
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> ::iroha::utility_service::proto::Status* Arena::CreateMaybeMessage<::iroha::utility_service::proto::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iroha {
namespace utility_service {
namespace proto {

enum Status_StatusEnum : int {
  Status_StatusEnum_unknown = 0,
  Status_StatusEnum_initialization = 1,
  Status_StatusEnum_running = 2,
  Status_StatusEnum_termination = 3,
  Status_StatusEnum_stopped = 4,
  Status_StatusEnum_failed = 5,
  Status_StatusEnum_Status_StatusEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_StatusEnum_Status_StatusEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_StatusEnum_IsValid(int value);
constexpr Status_StatusEnum Status_StatusEnum_StatusEnum_MIN = Status_StatusEnum_unknown;
constexpr Status_StatusEnum Status_StatusEnum_StatusEnum_MAX = Status_StatusEnum_failed;
constexpr int Status_StatusEnum_StatusEnum_ARRAYSIZE = Status_StatusEnum_StatusEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_StatusEnum_descriptor();
template<typename T>
inline const std::string& Status_StatusEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_StatusEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_StatusEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_StatusEnum_descriptor(), enum_t_value);
}
inline bool Status_StatusEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status_StatusEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_StatusEnum>(
    Status_StatusEnum_descriptor(), name, value);
}
// ===================================================================

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.utility_service.proto.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.utility_service.proto.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Status_StatusEnum StatusEnum;
  static constexpr StatusEnum unknown =
    Status_StatusEnum_unknown;
  static constexpr StatusEnum initialization =
    Status_StatusEnum_initialization;
  static constexpr StatusEnum running =
    Status_StatusEnum_running;
  static constexpr StatusEnum termination =
    Status_StatusEnum_termination;
  static constexpr StatusEnum stopped =
    Status_StatusEnum_stopped;
  static constexpr StatusEnum failed =
    Status_StatusEnum_failed;
  static inline bool StatusEnum_IsValid(int value) {
    return Status_StatusEnum_IsValid(value);
  }
  static constexpr StatusEnum StatusEnum_MIN =
    Status_StatusEnum_StatusEnum_MIN;
  static constexpr StatusEnum StatusEnum_MAX =
    Status_StatusEnum_StatusEnum_MAX;
  static constexpr int StatusEnum_ARRAYSIZE =
    Status_StatusEnum_StatusEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusEnum_descriptor() {
    return Status_StatusEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusEnum_Name.");
    return Status_StatusEnum_Name(enum_t_value);
  }
  static inline bool StatusEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StatusEnum* value) {
    return Status_StatusEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .iroha.utility_service.proto.Status.StatusEnum status = 1;
  void clear_status();
  ::iroha::utility_service::proto::Status_StatusEnum status() const;
  void set_status(::iroha::utility_service::proto::Status_StatusEnum value);
  private:
  ::iroha::utility_service::proto::Status_StatusEnum _internal_status() const;
  void _internal_set_status(::iroha::utility_service::proto::Status_StatusEnum value);
  public:

  // @@protoc_insertion_point(class_scope:iroha.utility_service.proto.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utility_5fendpoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// .iroha.utility_service.proto.Status.StatusEnum status = 1;
inline void Status::clear_status() {
  _impl_.status_ = 0;
}
inline ::iroha::utility_service::proto::Status_StatusEnum Status::_internal_status() const {
  return static_cast< ::iroha::utility_service::proto::Status_StatusEnum >(_impl_.status_);
}
inline ::iroha::utility_service::proto::Status_StatusEnum Status::status() const {
  // @@protoc_insertion_point(field_get:iroha.utility_service.proto.Status.status)
  return _internal_status();
}
inline void Status::_internal_set_status(::iroha::utility_service::proto::Status_StatusEnum value) {
  
  _impl_.status_ = value;
}
inline void Status::set_status(::iroha::utility_service::proto::Status_StatusEnum value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iroha.utility_service.proto.Status.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace utility_service
}  // namespace iroha

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::iroha::utility_service::proto::Status_StatusEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iroha::utility_service::proto::Status_StatusEnum>() {
  return ::iroha::utility_service::proto::Status_StatusEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_utility_5fendpoint_2eproto
