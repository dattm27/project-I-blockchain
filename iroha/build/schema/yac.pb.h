// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yac.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_yac_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_yac_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_yac_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_yac_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_yac_2eproto;
namespace iroha {
namespace consensus {
namespace yac {
namespace proto {
class Hash;
struct HashDefaultTypeInternal;
extern HashDefaultTypeInternal _Hash_default_instance_;
class Signature;
struct SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class Vote;
struct VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class VoteHashes;
struct VoteHashesDefaultTypeInternal;
extern VoteHashesDefaultTypeInternal _VoteHashes_default_instance_;
class VoteRound;
struct VoteRoundDefaultTypeInternal;
extern VoteRoundDefaultTypeInternal _VoteRound_default_instance_;
}  // namespace proto
}  // namespace yac
}  // namespace consensus
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> ::iroha::consensus::yac::proto::Hash* Arena::CreateMaybeMessage<::iroha::consensus::yac::proto::Hash>(Arena*);
template<> ::iroha::consensus::yac::proto::Signature* Arena::CreateMaybeMessage<::iroha::consensus::yac::proto::Signature>(Arena*);
template<> ::iroha::consensus::yac::proto::State* Arena::CreateMaybeMessage<::iroha::consensus::yac::proto::State>(Arena*);
template<> ::iroha::consensus::yac::proto::Vote* Arena::CreateMaybeMessage<::iroha::consensus::yac::proto::Vote>(Arena*);
template<> ::iroha::consensus::yac::proto::VoteHashes* Arena::CreateMaybeMessage<::iroha::consensus::yac::proto::VoteHashes>(Arena*);
template<> ::iroha::consensus::yac::proto::VoteRound* Arena::CreateMaybeMessage<::iroha::consensus::yac::proto::VoteRound>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iroha {
namespace consensus {
namespace yac {
namespace proto {

// ===================================================================

class Signature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.consensus.yac.proto.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  ~Signature() override;
  explicit PROTOBUF_CONSTEXPR Signature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Signature& from) {
    Signature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.consensus.yac.proto.Signature";
  }
  protected:
  explicit Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes pubkey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pubkey();
  PROTOBUF_NODISCARD std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:iroha.consensus.yac.proto.Signature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_yac_2eproto;
};
// -------------------------------------------------------------------

class VoteRound final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.consensus.yac.proto.VoteRound) */ {
 public:
  inline VoteRound() : VoteRound(nullptr) {}
  ~VoteRound() override;
  explicit PROTOBUF_CONSTEXPR VoteRound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteRound(const VoteRound& from);
  VoteRound(VoteRound&& from) noexcept
    : VoteRound() {
    *this = ::std::move(from);
  }

  inline VoteRound& operator=(const VoteRound& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteRound& operator=(VoteRound&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteRound& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteRound* internal_default_instance() {
    return reinterpret_cast<const VoteRound*>(
               &_VoteRound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VoteRound& a, VoteRound& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteRound* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteRound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteRound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoteRound>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoteRound& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoteRound& from) {
    VoteRound::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteRound* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.consensus.yac.proto.VoteRound";
  }
  protected:
  explicit VoteRound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockRoundFieldNumber = 1,
    kRejectRoundFieldNumber = 2,
  };
  // uint64 block_round = 1;
  void clear_block_round();
  uint64_t block_round() const;
  void set_block_round(uint64_t value);
  private:
  uint64_t _internal_block_round() const;
  void _internal_set_block_round(uint64_t value);
  public:

  // uint32 reject_round = 2;
  void clear_reject_round();
  uint32_t reject_round() const;
  void set_reject_round(uint32_t value);
  private:
  uint32_t _internal_reject_round() const;
  void _internal_set_reject_round(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iroha.consensus.yac.proto.VoteRound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t block_round_;
    uint32_t reject_round_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_yac_2eproto;
};
// -------------------------------------------------------------------

class VoteHashes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.consensus.yac.proto.VoteHashes) */ {
 public:
  inline VoteHashes() : VoteHashes(nullptr) {}
  ~VoteHashes() override;
  explicit PROTOBUF_CONSTEXPR VoteHashes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteHashes(const VoteHashes& from);
  VoteHashes(VoteHashes&& from) noexcept
    : VoteHashes() {
    *this = ::std::move(from);
  }

  inline VoteHashes& operator=(const VoteHashes& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteHashes& operator=(VoteHashes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteHashes& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteHashes* internal_default_instance() {
    return reinterpret_cast<const VoteHashes*>(
               &_VoteHashes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VoteHashes& a, VoteHashes& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteHashes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteHashes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteHashes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoteHashes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoteHashes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoteHashes& from) {
    VoteHashes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteHashes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.consensus.yac.proto.VoteHashes";
  }
  protected:
  explicit VoteHashes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
    kBlockFieldNumber = 2,
  };
  // bytes proposal = 1;
  void clear_proposal();
  const std::string& proposal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proposal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proposal();
  PROTOBUF_NODISCARD std::string* release_proposal();
  void set_allocated_proposal(std::string* proposal);
  private:
  const std::string& _internal_proposal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposal(const std::string& value);
  std::string* _internal_mutable_proposal();
  public:

  // bytes block = 2;
  void clear_block();
  const std::string& block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block();
  PROTOBUF_NODISCARD std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:iroha.consensus.yac.proto.VoteHashes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_yac_2eproto;
};
// -------------------------------------------------------------------

class Hash final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.consensus.yac.proto.Hash) */ {
 public:
  inline Hash() : Hash(nullptr) {}
  ~Hash() override;
  explicit PROTOBUF_CONSTEXPR Hash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hash(const Hash& from);
  Hash(Hash&& from) noexcept
    : Hash() {
    *this = ::std::move(from);
  }

  inline Hash& operator=(const Hash& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hash& operator=(Hash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hash& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hash* internal_default_instance() {
    return reinterpret_cast<const Hash*>(
               &_Hash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Hash& a, Hash& b) {
    a.Swap(&b);
  }
  inline void Swap(Hash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hash>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Hash& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Hash& from) {
    Hash::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.consensus.yac.proto.Hash";
  }
  protected:
  explicit Hash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteRoundFieldNumber = 1,
    kVoteHashesFieldNumber = 2,
    kBlockSignatureFieldNumber = 3,
  };
  // .iroha.consensus.yac.proto.VoteRound vote_round = 1;
  bool has_vote_round() const;
  private:
  bool _internal_has_vote_round() const;
  public:
  void clear_vote_round();
  const ::iroha::consensus::yac::proto::VoteRound& vote_round() const;
  PROTOBUF_NODISCARD ::iroha::consensus::yac::proto::VoteRound* release_vote_round();
  ::iroha::consensus::yac::proto::VoteRound* mutable_vote_round();
  void set_allocated_vote_round(::iroha::consensus::yac::proto::VoteRound* vote_round);
  private:
  const ::iroha::consensus::yac::proto::VoteRound& _internal_vote_round() const;
  ::iroha::consensus::yac::proto::VoteRound* _internal_mutable_vote_round();
  public:
  void unsafe_arena_set_allocated_vote_round(
      ::iroha::consensus::yac::proto::VoteRound* vote_round);
  ::iroha::consensus::yac::proto::VoteRound* unsafe_arena_release_vote_round();

  // .iroha.consensus.yac.proto.VoteHashes vote_hashes = 2;
  bool has_vote_hashes() const;
  private:
  bool _internal_has_vote_hashes() const;
  public:
  void clear_vote_hashes();
  const ::iroha::consensus::yac::proto::VoteHashes& vote_hashes() const;
  PROTOBUF_NODISCARD ::iroha::consensus::yac::proto::VoteHashes* release_vote_hashes();
  ::iroha::consensus::yac::proto::VoteHashes* mutable_vote_hashes();
  void set_allocated_vote_hashes(::iroha::consensus::yac::proto::VoteHashes* vote_hashes);
  private:
  const ::iroha::consensus::yac::proto::VoteHashes& _internal_vote_hashes() const;
  ::iroha::consensus::yac::proto::VoteHashes* _internal_mutable_vote_hashes();
  public:
  void unsafe_arena_set_allocated_vote_hashes(
      ::iroha::consensus::yac::proto::VoteHashes* vote_hashes);
  ::iroha::consensus::yac::proto::VoteHashes* unsafe_arena_release_vote_hashes();

  // .iroha.consensus.yac.proto.Signature block_signature = 3;
  bool has_block_signature() const;
  private:
  bool _internal_has_block_signature() const;
  public:
  void clear_block_signature();
  const ::iroha::consensus::yac::proto::Signature& block_signature() const;
  PROTOBUF_NODISCARD ::iroha::consensus::yac::proto::Signature* release_block_signature();
  ::iroha::consensus::yac::proto::Signature* mutable_block_signature();
  void set_allocated_block_signature(::iroha::consensus::yac::proto::Signature* block_signature);
  private:
  const ::iroha::consensus::yac::proto::Signature& _internal_block_signature() const;
  ::iroha::consensus::yac::proto::Signature* _internal_mutable_block_signature();
  public:
  void unsafe_arena_set_allocated_block_signature(
      ::iroha::consensus::yac::proto::Signature* block_signature);
  ::iroha::consensus::yac::proto::Signature* unsafe_arena_release_block_signature();

  // @@protoc_insertion_point(class_scope:iroha.consensus.yac.proto.Hash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::iroha::consensus::yac::proto::VoteRound* vote_round_;
    ::iroha::consensus::yac::proto::VoteHashes* vote_hashes_;
    ::iroha::consensus::yac::proto::Signature* block_signature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_yac_2eproto;
};
// -------------------------------------------------------------------

class Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.consensus.yac.proto.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  ~Vote() override;
  explicit PROTOBUF_CONSTEXPR Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vote(const Vote& from);
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(Vote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vote& from) {
    Vote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.consensus.yac.proto.Vote";
  }
  protected:
  explicit Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // .iroha.consensus.yac.proto.Hash hash = 1;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const ::iroha::consensus::yac::proto::Hash& hash() const;
  PROTOBUF_NODISCARD ::iroha::consensus::yac::proto::Hash* release_hash();
  ::iroha::consensus::yac::proto::Hash* mutable_hash();
  void set_allocated_hash(::iroha::consensus::yac::proto::Hash* hash);
  private:
  const ::iroha::consensus::yac::proto::Hash& _internal_hash() const;
  ::iroha::consensus::yac::proto::Hash* _internal_mutable_hash();
  public:
  void unsafe_arena_set_allocated_hash(
      ::iroha::consensus::yac::proto::Hash* hash);
  ::iroha::consensus::yac::proto::Hash* unsafe_arena_release_hash();

  // .iroha.consensus.yac.proto.Signature signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::iroha::consensus::yac::proto::Signature& signature() const;
  PROTOBUF_NODISCARD ::iroha::consensus::yac::proto::Signature* release_signature();
  ::iroha::consensus::yac::proto::Signature* mutable_signature();
  void set_allocated_signature(::iroha::consensus::yac::proto::Signature* signature);
  private:
  const ::iroha::consensus::yac::proto::Signature& _internal_signature() const;
  ::iroha::consensus::yac::proto::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::iroha::consensus::yac::proto::Signature* signature);
  ::iroha::consensus::yac::proto::Signature* unsafe_arena_release_signature();

  // @@protoc_insertion_point(class_scope:iroha.consensus.yac.proto.Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::iroha::consensus::yac::proto::Hash* hash_;
    ::iroha::consensus::yac::proto::Signature* signature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_yac_2eproto;
};
// -------------------------------------------------------------------

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.consensus.yac.proto.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit PROTOBUF_CONSTEXPR State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const State& from) {
    State::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.consensus.yac.proto.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
  };
  // repeated .iroha.consensus.yac.proto.Vote votes = 1;
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::iroha::consensus::yac::proto::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::consensus::yac::proto::Vote >*
      mutable_votes();
  private:
  const ::iroha::consensus::yac::proto::Vote& _internal_votes(int index) const;
  ::iroha::consensus::yac::proto::Vote* _internal_add_votes();
  public:
  const ::iroha::consensus::yac::proto::Vote& votes(int index) const;
  ::iroha::consensus::yac::proto::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::consensus::yac::proto::Vote >&
      votes() const;

  // @@protoc_insertion_point(class_scope:iroha.consensus.yac.proto.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::consensus::yac::proto::Vote > votes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_yac_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Signature

// bytes pubkey = 1;
inline void Signature::clear_pubkey() {
  _impl_.pubkey_.ClearToEmpty();
}
inline const std::string& Signature::pubkey() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.Signature.pubkey)
  return _internal_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signature::set_pubkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pubkey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.consensus.yac.proto.Signature.pubkey)
}
inline std::string* Signature::mutable_pubkey() {
  std::string* _s = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.Signature.pubkey)
  return _s;
}
inline const std::string& Signature::_internal_pubkey() const {
  return _impl_.pubkey_.Get();
}
inline void Signature::_internal_set_pubkey(const std::string& value) {
  
  _impl_.pubkey_.Set(value, GetArenaForAllocation());
}
inline std::string* Signature::_internal_mutable_pubkey() {
  
  return _impl_.pubkey_.Mutable(GetArenaForAllocation());
}
inline std::string* Signature::release_pubkey() {
  // @@protoc_insertion_point(field_release:iroha.consensus.yac.proto.Signature.pubkey)
  return _impl_.pubkey_.Release();
}
inline void Signature::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  _impl_.pubkey_.SetAllocated(pubkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pubkey_.IsDefault()) {
    _impl_.pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.consensus.yac.proto.Signature.pubkey)
}

// bytes signature = 2;
inline void Signature::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.Signature.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signature::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.consensus.yac.proto.Signature.signature)
}
inline std::string* Signature::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.Signature.signature)
  return _s;
}
inline const std::string& Signature::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Signature::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Signature::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:iroha.consensus.yac.proto.Signature.signature)
  return _impl_.signature_.Release();
}
inline void Signature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.consensus.yac.proto.Signature.signature)
}

// -------------------------------------------------------------------

// VoteRound

// uint64 block_round = 1;
inline void VoteRound::clear_block_round() {
  _impl_.block_round_ = uint64_t{0u};
}
inline uint64_t VoteRound::_internal_block_round() const {
  return _impl_.block_round_;
}
inline uint64_t VoteRound::block_round() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.VoteRound.block_round)
  return _internal_block_round();
}
inline void VoteRound::_internal_set_block_round(uint64_t value) {
  
  _impl_.block_round_ = value;
}
inline void VoteRound::set_block_round(uint64_t value) {
  _internal_set_block_round(value);
  // @@protoc_insertion_point(field_set:iroha.consensus.yac.proto.VoteRound.block_round)
}

// uint32 reject_round = 2;
inline void VoteRound::clear_reject_round() {
  _impl_.reject_round_ = 0u;
}
inline uint32_t VoteRound::_internal_reject_round() const {
  return _impl_.reject_round_;
}
inline uint32_t VoteRound::reject_round() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.VoteRound.reject_round)
  return _internal_reject_round();
}
inline void VoteRound::_internal_set_reject_round(uint32_t value) {
  
  _impl_.reject_round_ = value;
}
inline void VoteRound::set_reject_round(uint32_t value) {
  _internal_set_reject_round(value);
  // @@protoc_insertion_point(field_set:iroha.consensus.yac.proto.VoteRound.reject_round)
}

// -------------------------------------------------------------------

// VoteHashes

// bytes proposal = 1;
inline void VoteHashes::clear_proposal() {
  _impl_.proposal_.ClearToEmpty();
}
inline const std::string& VoteHashes::proposal() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.VoteHashes.proposal)
  return _internal_proposal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoteHashes::set_proposal(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proposal_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.consensus.yac.proto.VoteHashes.proposal)
}
inline std::string* VoteHashes::mutable_proposal() {
  std::string* _s = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.VoteHashes.proposal)
  return _s;
}
inline const std::string& VoteHashes::_internal_proposal() const {
  return _impl_.proposal_.Get();
}
inline void VoteHashes::_internal_set_proposal(const std::string& value) {
  
  _impl_.proposal_.Set(value, GetArenaForAllocation());
}
inline std::string* VoteHashes::_internal_mutable_proposal() {
  
  return _impl_.proposal_.Mutable(GetArenaForAllocation());
}
inline std::string* VoteHashes::release_proposal() {
  // @@protoc_insertion_point(field_release:iroha.consensus.yac.proto.VoteHashes.proposal)
  return _impl_.proposal_.Release();
}
inline void VoteHashes::set_allocated_proposal(std::string* proposal) {
  if (proposal != nullptr) {
    
  } else {
    
  }
  _impl_.proposal_.SetAllocated(proposal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proposal_.IsDefault()) {
    _impl_.proposal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.consensus.yac.proto.VoteHashes.proposal)
}

// bytes block = 2;
inline void VoteHashes::clear_block() {
  _impl_.block_.ClearToEmpty();
}
inline const std::string& VoteHashes::block() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.VoteHashes.block)
  return _internal_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoteHashes::set_block(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iroha.consensus.yac.proto.VoteHashes.block)
}
inline std::string* VoteHashes::mutable_block() {
  std::string* _s = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.VoteHashes.block)
  return _s;
}
inline const std::string& VoteHashes::_internal_block() const {
  return _impl_.block_.Get();
}
inline void VoteHashes::_internal_set_block(const std::string& value) {
  
  _impl_.block_.Set(value, GetArenaForAllocation());
}
inline std::string* VoteHashes::_internal_mutable_block() {
  
  return _impl_.block_.Mutable(GetArenaForAllocation());
}
inline std::string* VoteHashes::release_block() {
  // @@protoc_insertion_point(field_release:iroha.consensus.yac.proto.VoteHashes.block)
  return _impl_.block_.Release();
}
inline void VoteHashes::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    
  } else {
    
  }
  _impl_.block_.SetAllocated(block, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_.IsDefault()) {
    _impl_.block_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iroha.consensus.yac.proto.VoteHashes.block)
}

// -------------------------------------------------------------------

// Hash

// .iroha.consensus.yac.proto.VoteRound vote_round = 1;
inline bool Hash::_internal_has_vote_round() const {
  return this != internal_default_instance() && _impl_.vote_round_ != nullptr;
}
inline bool Hash::has_vote_round() const {
  return _internal_has_vote_round();
}
inline void Hash::clear_vote_round() {
  if (GetArenaForAllocation() == nullptr && _impl_.vote_round_ != nullptr) {
    delete _impl_.vote_round_;
  }
  _impl_.vote_round_ = nullptr;
}
inline const ::iroha::consensus::yac::proto::VoteRound& Hash::_internal_vote_round() const {
  const ::iroha::consensus::yac::proto::VoteRound* p = _impl_.vote_round_;
  return p != nullptr ? *p : reinterpret_cast<const ::iroha::consensus::yac::proto::VoteRound&>(
      ::iroha::consensus::yac::proto::_VoteRound_default_instance_);
}
inline const ::iroha::consensus::yac::proto::VoteRound& Hash::vote_round() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.Hash.vote_round)
  return _internal_vote_round();
}
inline void Hash::unsafe_arena_set_allocated_vote_round(
    ::iroha::consensus::yac::proto::VoteRound* vote_round) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vote_round_);
  }
  _impl_.vote_round_ = vote_round;
  if (vote_round) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.consensus.yac.proto.Hash.vote_round)
}
inline ::iroha::consensus::yac::proto::VoteRound* Hash::release_vote_round() {
  
  ::iroha::consensus::yac::proto::VoteRound* temp = _impl_.vote_round_;
  _impl_.vote_round_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iroha::consensus::yac::proto::VoteRound* Hash::unsafe_arena_release_vote_round() {
  // @@protoc_insertion_point(field_release:iroha.consensus.yac.proto.Hash.vote_round)
  
  ::iroha::consensus::yac::proto::VoteRound* temp = _impl_.vote_round_;
  _impl_.vote_round_ = nullptr;
  return temp;
}
inline ::iroha::consensus::yac::proto::VoteRound* Hash::_internal_mutable_vote_round() {
  
  if (_impl_.vote_round_ == nullptr) {
    auto* p = CreateMaybeMessage<::iroha::consensus::yac::proto::VoteRound>(GetArenaForAllocation());
    _impl_.vote_round_ = p;
  }
  return _impl_.vote_round_;
}
inline ::iroha::consensus::yac::proto::VoteRound* Hash::mutable_vote_round() {
  ::iroha::consensus::yac::proto::VoteRound* _msg = _internal_mutable_vote_round();
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.Hash.vote_round)
  return _msg;
}
inline void Hash::set_allocated_vote_round(::iroha::consensus::yac::proto::VoteRound* vote_round) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vote_round_;
  }
  if (vote_round) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vote_round);
    if (message_arena != submessage_arena) {
      vote_round = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_round, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vote_round_ = vote_round;
  // @@protoc_insertion_point(field_set_allocated:iroha.consensus.yac.proto.Hash.vote_round)
}

// .iroha.consensus.yac.proto.VoteHashes vote_hashes = 2;
inline bool Hash::_internal_has_vote_hashes() const {
  return this != internal_default_instance() && _impl_.vote_hashes_ != nullptr;
}
inline bool Hash::has_vote_hashes() const {
  return _internal_has_vote_hashes();
}
inline void Hash::clear_vote_hashes() {
  if (GetArenaForAllocation() == nullptr && _impl_.vote_hashes_ != nullptr) {
    delete _impl_.vote_hashes_;
  }
  _impl_.vote_hashes_ = nullptr;
}
inline const ::iroha::consensus::yac::proto::VoteHashes& Hash::_internal_vote_hashes() const {
  const ::iroha::consensus::yac::proto::VoteHashes* p = _impl_.vote_hashes_;
  return p != nullptr ? *p : reinterpret_cast<const ::iroha::consensus::yac::proto::VoteHashes&>(
      ::iroha::consensus::yac::proto::_VoteHashes_default_instance_);
}
inline const ::iroha::consensus::yac::proto::VoteHashes& Hash::vote_hashes() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.Hash.vote_hashes)
  return _internal_vote_hashes();
}
inline void Hash::unsafe_arena_set_allocated_vote_hashes(
    ::iroha::consensus::yac::proto::VoteHashes* vote_hashes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vote_hashes_);
  }
  _impl_.vote_hashes_ = vote_hashes;
  if (vote_hashes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.consensus.yac.proto.Hash.vote_hashes)
}
inline ::iroha::consensus::yac::proto::VoteHashes* Hash::release_vote_hashes() {
  
  ::iroha::consensus::yac::proto::VoteHashes* temp = _impl_.vote_hashes_;
  _impl_.vote_hashes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iroha::consensus::yac::proto::VoteHashes* Hash::unsafe_arena_release_vote_hashes() {
  // @@protoc_insertion_point(field_release:iroha.consensus.yac.proto.Hash.vote_hashes)
  
  ::iroha::consensus::yac::proto::VoteHashes* temp = _impl_.vote_hashes_;
  _impl_.vote_hashes_ = nullptr;
  return temp;
}
inline ::iroha::consensus::yac::proto::VoteHashes* Hash::_internal_mutable_vote_hashes() {
  
  if (_impl_.vote_hashes_ == nullptr) {
    auto* p = CreateMaybeMessage<::iroha::consensus::yac::proto::VoteHashes>(GetArenaForAllocation());
    _impl_.vote_hashes_ = p;
  }
  return _impl_.vote_hashes_;
}
inline ::iroha::consensus::yac::proto::VoteHashes* Hash::mutable_vote_hashes() {
  ::iroha::consensus::yac::proto::VoteHashes* _msg = _internal_mutable_vote_hashes();
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.Hash.vote_hashes)
  return _msg;
}
inline void Hash::set_allocated_vote_hashes(::iroha::consensus::yac::proto::VoteHashes* vote_hashes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vote_hashes_;
  }
  if (vote_hashes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vote_hashes);
    if (message_arena != submessage_arena) {
      vote_hashes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_hashes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vote_hashes_ = vote_hashes;
  // @@protoc_insertion_point(field_set_allocated:iroha.consensus.yac.proto.Hash.vote_hashes)
}

// .iroha.consensus.yac.proto.Signature block_signature = 3;
inline bool Hash::_internal_has_block_signature() const {
  return this != internal_default_instance() && _impl_.block_signature_ != nullptr;
}
inline bool Hash::has_block_signature() const {
  return _internal_has_block_signature();
}
inline void Hash::clear_block_signature() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_signature_ != nullptr) {
    delete _impl_.block_signature_;
  }
  _impl_.block_signature_ = nullptr;
}
inline const ::iroha::consensus::yac::proto::Signature& Hash::_internal_block_signature() const {
  const ::iroha::consensus::yac::proto::Signature* p = _impl_.block_signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::iroha::consensus::yac::proto::Signature&>(
      ::iroha::consensus::yac::proto::_Signature_default_instance_);
}
inline const ::iroha::consensus::yac::proto::Signature& Hash::block_signature() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.Hash.block_signature)
  return _internal_block_signature();
}
inline void Hash::unsafe_arena_set_allocated_block_signature(
    ::iroha::consensus::yac::proto::Signature* block_signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_signature_);
  }
  _impl_.block_signature_ = block_signature;
  if (block_signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.consensus.yac.proto.Hash.block_signature)
}
inline ::iroha::consensus::yac::proto::Signature* Hash::release_block_signature() {
  
  ::iroha::consensus::yac::proto::Signature* temp = _impl_.block_signature_;
  _impl_.block_signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iroha::consensus::yac::proto::Signature* Hash::unsafe_arena_release_block_signature() {
  // @@protoc_insertion_point(field_release:iroha.consensus.yac.proto.Hash.block_signature)
  
  ::iroha::consensus::yac::proto::Signature* temp = _impl_.block_signature_;
  _impl_.block_signature_ = nullptr;
  return temp;
}
inline ::iroha::consensus::yac::proto::Signature* Hash::_internal_mutable_block_signature() {
  
  if (_impl_.block_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::iroha::consensus::yac::proto::Signature>(GetArenaForAllocation());
    _impl_.block_signature_ = p;
  }
  return _impl_.block_signature_;
}
inline ::iroha::consensus::yac::proto::Signature* Hash::mutable_block_signature() {
  ::iroha::consensus::yac::proto::Signature* _msg = _internal_mutable_block_signature();
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.Hash.block_signature)
  return _msg;
}
inline void Hash::set_allocated_block_signature(::iroha::consensus::yac::proto::Signature* block_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_signature_;
  }
  if (block_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_signature);
    if (message_arena != submessage_arena) {
      block_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_signature, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.block_signature_ = block_signature;
  // @@protoc_insertion_point(field_set_allocated:iroha.consensus.yac.proto.Hash.block_signature)
}

// -------------------------------------------------------------------

// Vote

// .iroha.consensus.yac.proto.Hash hash = 1;
inline bool Vote::_internal_has_hash() const {
  return this != internal_default_instance() && _impl_.hash_ != nullptr;
}
inline bool Vote::has_hash() const {
  return _internal_has_hash();
}
inline void Vote::clear_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.hash_ != nullptr) {
    delete _impl_.hash_;
  }
  _impl_.hash_ = nullptr;
}
inline const ::iroha::consensus::yac::proto::Hash& Vote::_internal_hash() const {
  const ::iroha::consensus::yac::proto::Hash* p = _impl_.hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::iroha::consensus::yac::proto::Hash&>(
      ::iroha::consensus::yac::proto::_Hash_default_instance_);
}
inline const ::iroha::consensus::yac::proto::Hash& Vote::hash() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.Vote.hash)
  return _internal_hash();
}
inline void Vote::unsafe_arena_set_allocated_hash(
    ::iroha::consensus::yac::proto::Hash* hash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hash_);
  }
  _impl_.hash_ = hash;
  if (hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.consensus.yac.proto.Vote.hash)
}
inline ::iroha::consensus::yac::proto::Hash* Vote::release_hash() {
  
  ::iroha::consensus::yac::proto::Hash* temp = _impl_.hash_;
  _impl_.hash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iroha::consensus::yac::proto::Hash* Vote::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_release:iroha.consensus.yac.proto.Vote.hash)
  
  ::iroha::consensus::yac::proto::Hash* temp = _impl_.hash_;
  _impl_.hash_ = nullptr;
  return temp;
}
inline ::iroha::consensus::yac::proto::Hash* Vote::_internal_mutable_hash() {
  
  if (_impl_.hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::iroha::consensus::yac::proto::Hash>(GetArenaForAllocation());
    _impl_.hash_ = p;
  }
  return _impl_.hash_;
}
inline ::iroha::consensus::yac::proto::Hash* Vote::mutable_hash() {
  ::iroha::consensus::yac::proto::Hash* _msg = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.Vote.hash)
  return _msg;
}
inline void Vote::set_allocated_hash(::iroha::consensus::yac::proto::Hash* hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hash_;
  }
  if (hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hash);
    if (message_arena != submessage_arena) {
      hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hash_ = hash;
  // @@protoc_insertion_point(field_set_allocated:iroha.consensus.yac.proto.Vote.hash)
}

// .iroha.consensus.yac.proto.Signature signature = 2;
inline bool Vote::_internal_has_signature() const {
  return this != internal_default_instance() && _impl_.signature_ != nullptr;
}
inline bool Vote::has_signature() const {
  return _internal_has_signature();
}
inline void Vote::clear_signature() {
  if (GetArenaForAllocation() == nullptr && _impl_.signature_ != nullptr) {
    delete _impl_.signature_;
  }
  _impl_.signature_ = nullptr;
}
inline const ::iroha::consensus::yac::proto::Signature& Vote::_internal_signature() const {
  const ::iroha::consensus::yac::proto::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::iroha::consensus::yac::proto::Signature&>(
      ::iroha::consensus::yac::proto::_Signature_default_instance_);
}
inline const ::iroha::consensus::yac::proto::Signature& Vote::signature() const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.Vote.signature)
  return _internal_signature();
}
inline void Vote::unsafe_arena_set_allocated_signature(
    ::iroha::consensus::yac::proto::Signature* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.consensus.yac.proto.Vote.signature)
}
inline ::iroha::consensus::yac::proto::Signature* Vote::release_signature() {
  
  ::iroha::consensus::yac::proto::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iroha::consensus::yac::proto::Signature* Vote::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:iroha.consensus.yac.proto.Vote.signature)
  
  ::iroha::consensus::yac::proto::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::iroha::consensus::yac::proto::Signature* Vote::_internal_mutable_signature() {
  
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::iroha::consensus::yac::proto::Signature>(GetArenaForAllocation());
    _impl_.signature_ = p;
  }
  return _impl_.signature_;
}
inline ::iroha::consensus::yac::proto::Signature* Vote::mutable_signature() {
  ::iroha::consensus::yac::proto::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.Vote.signature)
  return _msg;
}
inline void Vote::set_allocated_signature(::iroha::consensus::yac::proto::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signature_;
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signature);
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:iroha.consensus.yac.proto.Vote.signature)
}

// -------------------------------------------------------------------

// State

// repeated .iroha.consensus.yac.proto.Vote votes = 1;
inline int State::_internal_votes_size() const {
  return _impl_.votes_.size();
}
inline int State::votes_size() const {
  return _internal_votes_size();
}
inline void State::clear_votes() {
  _impl_.votes_.Clear();
}
inline ::iroha::consensus::yac::proto::Vote* State::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.consensus.yac.proto.State.votes)
  return _impl_.votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::consensus::yac::proto::Vote >*
State::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:iroha.consensus.yac.proto.State.votes)
  return &_impl_.votes_;
}
inline const ::iroha::consensus::yac::proto::Vote& State::_internal_votes(int index) const {
  return _impl_.votes_.Get(index);
}
inline const ::iroha::consensus::yac::proto::Vote& State::votes(int index) const {
  // @@protoc_insertion_point(field_get:iroha.consensus.yac.proto.State.votes)
  return _internal_votes(index);
}
inline ::iroha::consensus::yac::proto::Vote* State::_internal_add_votes() {
  return _impl_.votes_.Add();
}
inline ::iroha::consensus::yac::proto::Vote* State::add_votes() {
  ::iroha::consensus::yac::proto::Vote* _add = _internal_add_votes();
  // @@protoc_insertion_point(field_add:iroha.consensus.yac.proto.State.votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::consensus::yac::proto::Vote >&
State::votes() const {
  // @@protoc_insertion_point(field_list:iroha.consensus.yac.proto.State.votes)
  return _impl_.votes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace yac
}  // namespace consensus
}  // namespace iroha

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_yac_2eproto
